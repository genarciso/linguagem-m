Terminais sem uso na gramática

    L_BRACKET
    R_BRACKET
    CONTINUE
    CONSTANT
    RETURN
    EOL
    ADDRESS
    DOT
    MALLOC_OP
    FREE_OP
    CALLOC_OP


Estado 36 conflitos: 3 de redução/redução
Estado 49 conflitos: 1 de deslocamento/redução
Estado 125 conflitos: 1 de redução/redução


Gramática

    0 $accept: program $end

    1 program: decls_list

    2 decls_list: decls
    3           | decls decls_list

    4 stm_list: stm
    5         | stm stm_list

    6 stm: decl SEMICOLON
    7    | cond_stm
    8    | loop_stm
    9    | print_stm SEMICOLON
   10    | expres_list SEMICOLON
   11    | assingment SEMICOLON
   12    | initialization SEMICOLON
   13    | uniry_op SEMICOLON
   14    | fun_call SEMICOLON

   15 decls: decl SEMICOLON
   16      | assingment SEMICOLON
   17      | initialization SEMICOLON
   18      | fun_struct

   19 decl: type id_list

   20 assingment: IDENTIFIER ASSINGMENT expr

   21 initialization: type IDENTIFIER ASSINGMENT expr

   22 print_stm: PRINT L_PARENTHESIS literal_string R_PARENTHESIS
   23          | PRINT L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS
   24          | PRINTF L_PARENTHESIS literal_string R_PARENTHESIS
   25          | PRINTF L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS

   26 id_list: IDENTIFIER
   27        | IDENTIFIER COMMA id_list

   28 expres_list: expr SEMICOLON
   29            | expr SEMICOLON expres_list

   30 expr: log_expr
   31     | arit_expr

   32 cond_stm: if_struct
   33         | switch_struct

   34 if_struct: IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block else_struct

   35 else_struct: %empty
   36            | elseif_list ELSE_STM block

   37 elseif_list: %empty
   38            | elseif_struct elseif_list

   39 elseif_struct: ELSE_IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

   41 case_list_switch: %empty
   42                 | case_switch case_list_switch

   43 case_switch: CASE literal_term DOUBLE_DOT stm_list BREAK SEMICOLON

   44 loop_stm: while_struct
   45         | for_struct

   46 while_struct: WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS block
   47             | DO_STM block WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS SEMICOLON

   48 $@1: %empty

   49 $@2: %empty

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON for_struct_stm R_PARENTHESIS $@2 block

   51 for_struct_stm: uniry_op
   52               | assingment

   53 uniry_op: arit_expr INC_OP
   54         | arit_expr DEC_OP

   55 $@3: %empty

   56 fun_call: IDENTIFIER L_PARENTHESIS $@3 param_list_call R_PARENTHESIS

   57 $@4: %empty

   58 $@5: %empty

   59 fun_struct: type IDENTIFIER L_PARENTHESIS $@4 par_list $@5 R_PARENTHESIS block

   60 $@6: %empty

   61 block: L_KEY $@6 stm_list R_KEY

   62 type: VOID_TYPE
   63     | INT_TYPE
   64     | FLOAT_TYPE
   65     | DOUBLE_TYPE
   66     | CHAR_TYPE
   67     | STRING_TYPE
   68     | BOOLEAN_TYPE
   69     | MATRIZ_TYPE

   70 par_list: %empty
   71         | par_term
   72         | par_term COMMA par_list

   73 par_term: type IDENTIFIER

   74 arit_expr: base
   75          | arit_expr PLUS_OP base
   76          | arit_expr SUB_OP base
   77          | arit_expr DIV_OP base
   78          | arit_expr STAR base
   79          | arit_expr MOD_OP base

   80 base: arit_expr_right

   81 arit_expr_right: arit_expr_base
   82                | arit_expr_base FACT_OP arit_expr_right

   83 arit_expr_base: term
   84               | L_PARENTHESIS arit_expr R_PARENTHESIS

   85 log_expr: comp_expr
   86         | L_PARENTHESIS log_expr R_PARENTHESIS
   87         | log_expr op_log comp_expr

   88 comp_expr: arit_expr
   89          | comp_expr op_comp arit_expr
   90          | literal_string EQ_OP literal_string
   91          | literal_string NE_OP literal_string

   92 op_log: AND_OP
   93       | OR_OP
   94       | NOT_OP

   95 op_comp: SE_OP
   96        | S_OP
   97        | GE_OP
   98        | G_OP
   99        | EQ_OP
  100        | NE_OP

  101 param_list_call: %empty
  102                | expr
  103                | expr COMMA param_list_call

  104 term: term_num
  105     | log_term
  106     | IDENTIFIER

  107 term_num: LITERAL_INT
  108         | LITERAL_FLOAT
  109         | LITERAL_DOUBLE

  110 log_term: TRUE_VAL
  111         | FALSE_VAL

  112 literal_term: term
  113             | literal_string

  114 literal_string: LITERAL_CHAR
  115               | LITERAL_STRING


Terminais, com as regras onde eles aparecem

    $end (0) 0
    error (256)
    LITERAL_STRING <sValue> (258) 115
    IDENTIFIER <sValue> (259) 20 21 26 27 56 59 73 106
    INT_TYPE <sValue> (260) 63
    FLOAT_TYPE <sValue> (261) 64
    DOUBLE_TYPE <sValue> (262) 65
    STRING_TYPE <sValue> (263) 67
    BOOLEAN_TYPE <sValue> (264) 68
    MATRIZ_TYPE <sValue> (265) 69
    VOID_TYPE <sValue> (266) 62
    LITERAL_CHAR <sValue> (267) 114
    CHAR_TYPE <sValue> (268) 66
    LITERAL_INT <iValue> (269) 107
    LITERAL_FLOAT <fValue> (270) 108
    LITERAL_DOUBLE <dValue> (271) 109
    TRUE_VAL <bValue> (272) 110
    FALSE_VAL <bValue> (273) 111
    PLUS_OP (274) 75
    SUB_OP (275) 76
    DIV_OP (276) 77
    STAR (277) 78
    MOD_OP (278) 79
    FACT_OP (279) 82
    ASSINGMENT (280) 20 21
    INC_OP (281) 53
    DEC_OP (282) 54
    GE_OP (283) 97
    SE_OP (284) 95
    EQ_OP (285) 90 99
    NE_OP (286) 91 100
    G_OP (287) 98
    S_OP (288) 96
    AND_OP (289) 92
    OR_OP (290) 93
    NOT_OP (291) 94
    L_PARENTHESIS (292) 22 23 24 25 34 39 40 46 47 50 56 59 84 86
    R_PARENTHESIS (293) 22 23 24 25 34 39 40 46 47 50 56 59 84 86
    L_KEY (294) 40 61
    R_KEY (295) 40 61
    L_BRACKET (296)
    R_BRACKET (297)
    IF_STM (298) 34
    ELSE_STM (299) 36
    ELSE_IF_STM (300) 39
    FOR_STM (301) 50
    DO_STM (302) 47
    WHILE_STM (303) 46 47
    SWITCH_STM (304) 40
    CONTINUE (305)
    BREAK (306) 40 43
    PRINT (307) 22 23
    PRINTF (308) 24 25
    CASE (309) 43
    DEFAULT (310) 40
    CONSTANT (311)
    RETURN (312)
    EOL (313)
    ADDRESS (314)
    SEMICOLON (315) 6 9 10 11 12 13 14 15 16 17 28 29 40 43 47 50
    COMMA (316) 23 25 27 72 103
    DOT (317)
    DOUBLE_DOT (318) 40 43
    MALLOC_OP (319)
    FREE_OP (320)
    CALLOC_OP (321)


Não terminais com as regras onde eles aparecem

    $accept (67)
        à esquerda: 0
    program (68)
        à esquerda: 1
        à direita: 0
    decls_list <sValue> (69)
        à esquerda: 2 3
        à direita: 1 3
    stm_list <sValue> (70)
        à esquerda: 4 5
        à direita: 5 40 43 61
    stm <sValue> (71)
        à esquerda: 6 7 8 9 10 11 12 13 14
        à direita: 4 5
    decls <sValue> (72)
        à esquerda: 15 16 17 18
        à direita: 2 3
    decl <sValue> (73)
        à esquerda: 19
        à direita: 6 15
    assingment <sValue> (74)
        à esquerda: 20
        à direita: 11 16 52
    initialization <sValue> (75)
        à esquerda: 21
        à direita: 12 17 50
    print_stm <sValue> (76)
        à esquerda: 22 23 24 25
        à direita: 9
    id_list <sValue> (77)
        à esquerda: 26 27
        à direita: 19 23 25 27
    expres_list <sValue> (78)
        à esquerda: 28 29
        à direita: 10 29
    expr <strValue> (79)
        à esquerda: 30 31
        à direita: 20 21 28 29 102 103
    cond_stm <sValue> (80)
        à esquerda: 32 33
        à direita: 7
    if_struct <sValue> (81)
        à esquerda: 34
        à direita: 32
    else_struct <sValue> (82)
        à esquerda: 35 36
        à direita: 34
    elseif_list <sValue> (83)
        à esquerda: 37 38
        à direita: 36 38
    elseif_struct <sValue> (84)
        à esquerda: 39
        à direita: 38
    switch_struct <sValue> (85)
        à esquerda: 40
        à direita: 33
    case_list_switch <sValue> (86)
        à esquerda: 41 42
        à direita: 40 42
    case_switch <sValue> (87)
        à esquerda: 43
        à direita: 42
    loop_stm <sValue> (88)
        à esquerda: 44 45
        à direita: 8
    while_struct <sValue> (89)
        à esquerda: 46 47
        à direita: 44
    for_struct <sValue> (90)
        à esquerda: 50
        à direita: 45
    $@1 (91)
        à esquerda: 48
        à direita: 50
    $@2 (92)
        à esquerda: 49
        à direita: 50
    for_struct_stm <strValue> (93)
        à esquerda: 51 52
        à direita: 50
    uniry_op <strValue> (94)
        à esquerda: 53 54
        à direita: 13 51
    fun_call <sValue> (95)
        à esquerda: 56
        à direita: 14
    $@3 (96)
        à esquerda: 55
        à direita: 56
    fun_struct <sValue> (97)
        à esquerda: 59
        à direita: 18
    $@4 (98)
        à esquerda: 57
        à direita: 59
    $@5 (99)
        à esquerda: 58
        à direita: 59
    block <sValue> (100)
        à esquerda: 61
        à direita: 34 36 39 46 47 50 59
    $@6 (101)
        à esquerda: 60
        à direita: 61
    type <sValue> (102)
        à esquerda: 62 63 64 65 66 67 68 69
        à direita: 19 21 59 73
    par_list <sValue> (103)
        à esquerda: 70 71 72
        à direita: 59 72
    par_term <sValue> (104)
        à esquerda: 73
        à direita: 71 72
    arit_expr <strValue> (105)
        à esquerda: 74 75 76 77 78 79
        à direita: 31 53 54 75 76 77 78 79 84 88 89
    base <strValue> (106)
        à esquerda: 80
        à direita: 74 75 76 77 78 79
    arit_expr_right <strValue> (107)
        à esquerda: 81 82
        à direita: 80 82
    arit_expr_base <strValue> (108)
        à esquerda: 83 84
        à direita: 81 82
    log_expr <strValue> (109)
        à esquerda: 85 86 87
        à direita: 30 34 39 46 47 50 86 87
    comp_expr <strValue> (110)
        à esquerda: 88 89 90 91
        à direita: 85 87 89
    op_log <sValue> (111)
        à esquerda: 92 93 94
        à direita: 87
    op_comp <sValue> (112)
        à esquerda: 95 96 97 98 99 100
        à direita: 89
    param_list_call <sValue> (113)
        à esquerda: 101 102 103
        à direita: 56 103
    term <strValue> (114)
        à esquerda: 104 105 106
        à direita: 83 112
    term_num <strValue> (115)
        à esquerda: 107 108 109
        à direita: 104
    log_term <strValue> (116)
        à esquerda: 110 111
        à direita: 105
    literal_term <strValue> (117)
        à esquerda: 112 113
        à direita: 40 43
    literal_string <strValue> (118)
        à esquerda: 114 115
        à direita: 22 23 24 25 90 91 113


Estado 0

    0 $accept: . program $end

    IDENTIFIER    deslocar, e ir ao estado 1
    INT_TYPE      deslocar, e ir ao estado 2
    FLOAT_TYPE    deslocar, e ir ao estado 3
    DOUBLE_TYPE   deslocar, e ir ao estado 4
    STRING_TYPE   deslocar, e ir ao estado 5
    BOOLEAN_TYPE  deslocar, e ir ao estado 6
    MATRIZ_TYPE   deslocar, e ir ao estado 7
    VOID_TYPE     deslocar, e ir ao estado 8
    CHAR_TYPE     deslocar, e ir ao estado 9

    program         ir ao estado 10
    decls_list      ir ao estado 11
    decls           ir ao estado 12
    decl            ir ao estado 13
    assingment      ir ao estado 14
    initialization  ir ao estado 15
    fun_struct      ir ao estado 16
    type            ir ao estado 17


Estado 1

   20 assingment: IDENTIFIER . ASSINGMENT expr

    ASSINGMENT  deslocar, e ir ao estado 18


Estado 2

   63 type: INT_TYPE .

    $padrão  reduzir usando a regra 63 (type)


Estado 3

   64 type: FLOAT_TYPE .

    $padrão  reduzir usando a regra 64 (type)


Estado 4

   65 type: DOUBLE_TYPE .

    $padrão  reduzir usando a regra 65 (type)


Estado 5

   67 type: STRING_TYPE .

    $padrão  reduzir usando a regra 67 (type)


Estado 6

   68 type: BOOLEAN_TYPE .

    $padrão  reduzir usando a regra 68 (type)


Estado 7

   69 type: MATRIZ_TYPE .

    $padrão  reduzir usando a regra 69 (type)


Estado 8

   62 type: VOID_TYPE .

    $padrão  reduzir usando a regra 62 (type)


Estado 9

   66 type: CHAR_TYPE .

    $padrão  reduzir usando a regra 66 (type)


Estado 10

    0 $accept: program . $end

    $end  deslocar, e ir ao estado 19


Estado 11

    1 program: decls_list .

    $padrão  reduzir usando a regra 1 (program)


Estado 12

    2 decls_list: decls .
    3           | decls . decls_list

    IDENTIFIER    deslocar, e ir ao estado 1
    INT_TYPE      deslocar, e ir ao estado 2
    FLOAT_TYPE    deslocar, e ir ao estado 3
    DOUBLE_TYPE   deslocar, e ir ao estado 4
    STRING_TYPE   deslocar, e ir ao estado 5
    BOOLEAN_TYPE  deslocar, e ir ao estado 6
    MATRIZ_TYPE   deslocar, e ir ao estado 7
    VOID_TYPE     deslocar, e ir ao estado 8
    CHAR_TYPE     deslocar, e ir ao estado 9

    $padrão  reduzir usando a regra 2 (decls_list)

    decls_list      ir ao estado 20
    decls           ir ao estado 12
    decl            ir ao estado 13
    assingment      ir ao estado 14
    initialization  ir ao estado 15
    fun_struct      ir ao estado 16
    type            ir ao estado 17


Estado 13

   15 decls: decl . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 21


Estado 14

   16 decls: assingment . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 22


Estado 15

   17 decls: initialization . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 23


Estado 16

   18 decls: fun_struct .

    $padrão  reduzir usando a regra 18 (decls)


Estado 17

   19 decl: type . id_list
   21 initialization: type . IDENTIFIER ASSINGMENT expr
   59 fun_struct: type . IDENTIFIER L_PARENTHESIS $@4 par_list $@5 R_PARENTHESIS block

    IDENTIFIER  deslocar, e ir ao estado 24

    id_list  ir ao estado 25


Estado 18

   20 assingment: IDENTIFIER ASSINGMENT . expr

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    expr             ir ao estado 35
    arit_expr        ir ao estado 36
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 19

    0 $accept: program $end .

    $padrão  aceitar


Estado 20

    3 decls_list: decls decls_list .

    $padrão  reduzir usando a regra 3 (decls_list)


Estado 21

   15 decls: decl SEMICOLON .

    $padrão  reduzir usando a regra 15 (decls)


Estado 22

   16 decls: assingment SEMICOLON .

    $padrão  reduzir usando a regra 16 (decls)


Estado 23

   17 decls: initialization SEMICOLON .

    $padrão  reduzir usando a regra 17 (decls)


Estado 24

   21 initialization: type IDENTIFIER . ASSINGMENT expr
   26 id_list: IDENTIFIER .
   27        | IDENTIFIER . COMMA id_list
   59 fun_struct: type IDENTIFIER . L_PARENTHESIS $@4 par_list $@5 R_PARENTHESIS block

    ASSINGMENT     deslocar, e ir ao estado 46
    L_PARENTHESIS  deslocar, e ir ao estado 47
    COMMA          deslocar, e ir ao estado 48

    $padrão  reduzir usando a regra 26 (id_list)


Estado 25

   19 decl: type id_list .

    $padrão  reduzir usando a regra 19 (decl)


Estado 26

  115 literal_string: LITERAL_STRING .

    $padrão  reduzir usando a regra 115 (literal_string)


Estado 27

  106 term: IDENTIFIER .

    $padrão  reduzir usando a regra 106 (term)


Estado 28

  114 literal_string: LITERAL_CHAR .

    $padrão  reduzir usando a regra 114 (literal_string)


Estado 29

  107 term_num: LITERAL_INT .

    $padrão  reduzir usando a regra 107 (term_num)


Estado 30

  108 term_num: LITERAL_FLOAT .

    $padrão  reduzir usando a regra 108 (term_num)


Estado 31

  109 term_num: LITERAL_DOUBLE .

    $padrão  reduzir usando a regra 109 (term_num)


Estado 32

  110 log_term: TRUE_VAL .

    $padrão  reduzir usando a regra 110 (log_term)


Estado 33

  111 log_term: FALSE_VAL .

    $padrão  reduzir usando a regra 111 (log_term)


Estado 34

   84 arit_expr_base: L_PARENTHESIS . arit_expr R_PARENTHESIS
   86 log_expr: L_PARENTHESIS . log_expr R_PARENTHESIS

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    arit_expr        ir ao estado 49
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 50
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 35

   20 assingment: IDENTIFIER ASSINGMENT expr .

    $padrão  reduzir usando a regra 20 (assingment)


Estado 36

   31 expr: arit_expr .
   75 arit_expr: arit_expr . PLUS_OP base
   76          | arit_expr . SUB_OP base
   77          | arit_expr . DIV_OP base
   78          | arit_expr . STAR base
   79          | arit_expr . MOD_OP base
   88 comp_expr: arit_expr .

    PLUS_OP  deslocar, e ir ao estado 51
    SUB_OP   deslocar, e ir ao estado 52
    DIV_OP   deslocar, e ir ao estado 53
    STAR     deslocar, e ir ao estado 54
    MOD_OP   deslocar, e ir ao estado 55

    R_PARENTHESIS  reduzir usando a regra 31 (expr)
    R_PARENTHESIS  [reduzir usando a regra 88 (comp_expr)]
    SEMICOLON      reduzir usando a regra 31 (expr)
    SEMICOLON      [reduzir usando a regra 88 (comp_expr)]
    COMMA          reduzir usando a regra 31 (expr)
    COMMA          [reduzir usando a regra 88 (comp_expr)]
    $padrão       reduzir usando a regra 88 (comp_expr)


Estado 37

   74 arit_expr: base .

    $padrão  reduzir usando a regra 74 (arit_expr)


Estado 38

   80 base: arit_expr_right .

    $padrão  reduzir usando a regra 80 (base)


Estado 39

   81 arit_expr_right: arit_expr_base .
   82                | arit_expr_base . FACT_OP arit_expr_right

    FACT_OP  deslocar, e ir ao estado 56

    $padrão  reduzir usando a regra 81 (arit_expr_right)


Estado 40

   30 expr: log_expr .
   87 log_expr: log_expr . op_log comp_expr

    AND_OP  deslocar, e ir ao estado 57
    OR_OP   deslocar, e ir ao estado 58
    NOT_OP  deslocar, e ir ao estado 59

    $padrão  reduzir usando a regra 30 (expr)

    op_log  ir ao estado 60


Estado 41

   85 log_expr: comp_expr .
   89 comp_expr: comp_expr . op_comp arit_expr

    GE_OP  deslocar, e ir ao estado 61
    SE_OP  deslocar, e ir ao estado 62
    EQ_OP  deslocar, e ir ao estado 63
    NE_OP  deslocar, e ir ao estado 64
    G_OP   deslocar, e ir ao estado 65
    S_OP   deslocar, e ir ao estado 66

    $padrão  reduzir usando a regra 85 (log_expr)

    op_comp  ir ao estado 67


Estado 42

   83 arit_expr_base: term .

    $padrão  reduzir usando a regra 83 (arit_expr_base)


Estado 43

  104 term: term_num .

    $padrão  reduzir usando a regra 104 (term)


Estado 44

  105 term: log_term .

    $padrão  reduzir usando a regra 105 (term)


Estado 45

   90 comp_expr: literal_string . EQ_OP literal_string
   91          | literal_string . NE_OP literal_string

    EQ_OP  deslocar, e ir ao estado 68
    NE_OP  deslocar, e ir ao estado 69


Estado 46

   21 initialization: type IDENTIFIER ASSINGMENT . expr

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    expr             ir ao estado 70
    arit_expr        ir ao estado 36
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 47

   59 fun_struct: type IDENTIFIER L_PARENTHESIS . $@4 par_list $@5 R_PARENTHESIS block

    $padrão  reduzir usando a regra 57 ($@4)

    $@4  ir ao estado 71


Estado 48

   27 id_list: IDENTIFIER COMMA . id_list

    IDENTIFIER  deslocar, e ir ao estado 72

    id_list  ir ao estado 73


Estado 49

   75 arit_expr: arit_expr . PLUS_OP base
   76          | arit_expr . SUB_OP base
   77          | arit_expr . DIV_OP base
   78          | arit_expr . STAR base
   79          | arit_expr . MOD_OP base
   84 arit_expr_base: L_PARENTHESIS arit_expr . R_PARENTHESIS
   88 comp_expr: arit_expr .

    PLUS_OP        deslocar, e ir ao estado 51
    SUB_OP         deslocar, e ir ao estado 52
    DIV_OP         deslocar, e ir ao estado 53
    STAR           deslocar, e ir ao estado 54
    MOD_OP         deslocar, e ir ao estado 55
    R_PARENTHESIS  deslocar, e ir ao estado 74

    R_PARENTHESIS  [reduzir usando a regra 88 (comp_expr)]
    $padrão       reduzir usando a regra 88 (comp_expr)


Estado 50

   86 log_expr: L_PARENTHESIS log_expr . R_PARENTHESIS
   87         | log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 57
    OR_OP          deslocar, e ir ao estado 58
    NOT_OP         deslocar, e ir ao estado 59
    R_PARENTHESIS  deslocar, e ir ao estado 75

    op_log  ir ao estado 60


Estado 51

   75 arit_expr: arit_expr PLUS_OP . base

    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    base             ir ao estado 77
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 52

   76 arit_expr: arit_expr SUB_OP . base

    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    base             ir ao estado 78
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 53

   77 arit_expr: arit_expr DIV_OP . base

    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    base             ir ao estado 79
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 54

   78 arit_expr: arit_expr STAR . base

    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    base             ir ao estado 80
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 55

   79 arit_expr: arit_expr MOD_OP . base

    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    base             ir ao estado 81
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 56

   82 arit_expr_right: arit_expr_base FACT_OP . arit_expr_right

    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    arit_expr_right  ir ao estado 82
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 57

   92 op_log: AND_OP .

    $padrão  reduzir usando a regra 92 (op_log)


Estado 58

   93 op_log: OR_OP .

    $padrão  reduzir usando a regra 93 (op_log)


Estado 59

   94 op_log: NOT_OP .

    $padrão  reduzir usando a regra 94 (op_log)


Estado 60

   87 log_expr: log_expr op_log . comp_expr

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    arit_expr        ir ao estado 83
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    comp_expr        ir ao estado 84
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 61

   97 op_comp: GE_OP .

    $padrão  reduzir usando a regra 97 (op_comp)


Estado 62

   95 op_comp: SE_OP .

    $padrão  reduzir usando a regra 95 (op_comp)


Estado 63

   99 op_comp: EQ_OP .

    $padrão  reduzir usando a regra 99 (op_comp)


Estado 64

  100 op_comp: NE_OP .

    $padrão  reduzir usando a regra 100 (op_comp)


Estado 65

   98 op_comp: G_OP .

    $padrão  reduzir usando a regra 98 (op_comp)


Estado 66

   96 op_comp: S_OP .

    $padrão  reduzir usando a regra 96 (op_comp)


Estado 67

   89 comp_expr: comp_expr op_comp . arit_expr

    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    arit_expr        ir ao estado 85
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 68

   90 comp_expr: literal_string EQ_OP . literal_string

    LITERAL_STRING  deslocar, e ir ao estado 26
    LITERAL_CHAR    deslocar, e ir ao estado 28

    literal_string  ir ao estado 86


Estado 69

   91 comp_expr: literal_string NE_OP . literal_string

    LITERAL_STRING  deslocar, e ir ao estado 26
    LITERAL_CHAR    deslocar, e ir ao estado 28

    literal_string  ir ao estado 87


Estado 70

   21 initialization: type IDENTIFIER ASSINGMENT expr .

    $padrão  reduzir usando a regra 21 (initialization)


Estado 71

   59 fun_struct: type IDENTIFIER L_PARENTHESIS $@4 . par_list $@5 R_PARENTHESIS block

    INT_TYPE      deslocar, e ir ao estado 2
    FLOAT_TYPE    deslocar, e ir ao estado 3
    DOUBLE_TYPE   deslocar, e ir ao estado 4
    STRING_TYPE   deslocar, e ir ao estado 5
    BOOLEAN_TYPE  deslocar, e ir ao estado 6
    MATRIZ_TYPE   deslocar, e ir ao estado 7
    VOID_TYPE     deslocar, e ir ao estado 8
    CHAR_TYPE     deslocar, e ir ao estado 9

    $padrão  reduzir usando a regra 70 (par_list)

    type      ir ao estado 88
    par_list  ir ao estado 89
    par_term  ir ao estado 90


Estado 72

   26 id_list: IDENTIFIER .
   27        | IDENTIFIER . COMMA id_list

    COMMA  deslocar, e ir ao estado 48

    $padrão  reduzir usando a regra 26 (id_list)


Estado 73

   27 id_list: IDENTIFIER COMMA id_list .

    $padrão  reduzir usando a regra 27 (id_list)


Estado 74

   84 arit_expr_base: L_PARENTHESIS arit_expr R_PARENTHESIS .

    $padrão  reduzir usando a regra 84 (arit_expr_base)


Estado 75

   86 log_expr: L_PARENTHESIS log_expr R_PARENTHESIS .

    $padrão  reduzir usando a regra 86 (log_expr)


Estado 76

   84 arit_expr_base: L_PARENTHESIS . arit_expr R_PARENTHESIS

    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    arit_expr        ir ao estado 91
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 77

   75 arit_expr: arit_expr PLUS_OP base .

    $padrão  reduzir usando a regra 75 (arit_expr)


Estado 78

   76 arit_expr: arit_expr SUB_OP base .

    $padrão  reduzir usando a regra 76 (arit_expr)


Estado 79

   77 arit_expr: arit_expr DIV_OP base .

    $padrão  reduzir usando a regra 77 (arit_expr)


Estado 80

   78 arit_expr: arit_expr STAR base .

    $padrão  reduzir usando a regra 78 (arit_expr)


Estado 81

   79 arit_expr: arit_expr MOD_OP base .

    $padrão  reduzir usando a regra 79 (arit_expr)


Estado 82

   82 arit_expr_right: arit_expr_base FACT_OP arit_expr_right .

    $padrão  reduzir usando a regra 82 (arit_expr_right)


Estado 83

   75 arit_expr: arit_expr . PLUS_OP base
   76          | arit_expr . SUB_OP base
   77          | arit_expr . DIV_OP base
   78          | arit_expr . STAR base
   79          | arit_expr . MOD_OP base
   88 comp_expr: arit_expr .

    PLUS_OP  deslocar, e ir ao estado 51
    SUB_OP   deslocar, e ir ao estado 52
    DIV_OP   deslocar, e ir ao estado 53
    STAR     deslocar, e ir ao estado 54
    MOD_OP   deslocar, e ir ao estado 55

    $padrão  reduzir usando a regra 88 (comp_expr)


Estado 84

   87 log_expr: log_expr op_log comp_expr .
   89 comp_expr: comp_expr . op_comp arit_expr

    GE_OP  deslocar, e ir ao estado 61
    SE_OP  deslocar, e ir ao estado 62
    EQ_OP  deslocar, e ir ao estado 63
    NE_OP  deslocar, e ir ao estado 64
    G_OP   deslocar, e ir ao estado 65
    S_OP   deslocar, e ir ao estado 66

    $padrão  reduzir usando a regra 87 (log_expr)

    op_comp  ir ao estado 67


Estado 85

   75 arit_expr: arit_expr . PLUS_OP base
   76          | arit_expr . SUB_OP base
   77          | arit_expr . DIV_OP base
   78          | arit_expr . STAR base
   79          | arit_expr . MOD_OP base
   89 comp_expr: comp_expr op_comp arit_expr .

    PLUS_OP  deslocar, e ir ao estado 51
    SUB_OP   deslocar, e ir ao estado 52
    DIV_OP   deslocar, e ir ao estado 53
    STAR     deslocar, e ir ao estado 54
    MOD_OP   deslocar, e ir ao estado 55

    $padrão  reduzir usando a regra 89 (comp_expr)


Estado 86

   90 comp_expr: literal_string EQ_OP literal_string .

    $padrão  reduzir usando a regra 90 (comp_expr)


Estado 87

   91 comp_expr: literal_string NE_OP literal_string .

    $padrão  reduzir usando a regra 91 (comp_expr)


Estado 88

   73 par_term: type . IDENTIFIER

    IDENTIFIER  deslocar, e ir ao estado 92


Estado 89

   59 fun_struct: type IDENTIFIER L_PARENTHESIS $@4 par_list . $@5 R_PARENTHESIS block

    $padrão  reduzir usando a regra 58 ($@5)

    $@5  ir ao estado 93


Estado 90

   71 par_list: par_term .
   72         | par_term . COMMA par_list

    COMMA  deslocar, e ir ao estado 94

    $padrão  reduzir usando a regra 71 (par_list)


Estado 91

   75 arit_expr: arit_expr . PLUS_OP base
   76          | arit_expr . SUB_OP base
   77          | arit_expr . DIV_OP base
   78          | arit_expr . STAR base
   79          | arit_expr . MOD_OP base
   84 arit_expr_base: L_PARENTHESIS arit_expr . R_PARENTHESIS

    PLUS_OP        deslocar, e ir ao estado 51
    SUB_OP         deslocar, e ir ao estado 52
    DIV_OP         deslocar, e ir ao estado 53
    STAR           deslocar, e ir ao estado 54
    MOD_OP         deslocar, e ir ao estado 55
    R_PARENTHESIS  deslocar, e ir ao estado 74


Estado 92

   73 par_term: type IDENTIFIER .

    $padrão  reduzir usando a regra 73 (par_term)


Estado 93

   59 fun_struct: type IDENTIFIER L_PARENTHESIS $@4 par_list $@5 . R_PARENTHESIS block

    R_PARENTHESIS  deslocar, e ir ao estado 95


Estado 94

   72 par_list: par_term COMMA . par_list

    INT_TYPE      deslocar, e ir ao estado 2
    FLOAT_TYPE    deslocar, e ir ao estado 3
    DOUBLE_TYPE   deslocar, e ir ao estado 4
    STRING_TYPE   deslocar, e ir ao estado 5
    BOOLEAN_TYPE  deslocar, e ir ao estado 6
    MATRIZ_TYPE   deslocar, e ir ao estado 7
    VOID_TYPE     deslocar, e ir ao estado 8
    CHAR_TYPE     deslocar, e ir ao estado 9

    $padrão  reduzir usando a regra 70 (par_list)

    type      ir ao estado 88
    par_list  ir ao estado 96
    par_term  ir ao estado 90


Estado 95

   59 fun_struct: type IDENTIFIER L_PARENTHESIS $@4 par_list $@5 R_PARENTHESIS . block

    L_KEY  deslocar, e ir ao estado 97

    block  ir ao estado 98


Estado 96

   72 par_list: par_term COMMA par_list .

    $padrão  reduzir usando a regra 72 (par_list)


Estado 97

   61 block: L_KEY . $@6 stm_list R_KEY

    $padrão  reduzir usando a regra 60 ($@6)

    $@6  ir ao estado 99


Estado 98

   59 fun_struct: type IDENTIFIER L_PARENTHESIS $@4 par_list $@5 R_PARENTHESIS block .

    $padrão  reduzir usando a regra 59 (fun_struct)


Estado 99

   61 block: L_KEY $@6 . stm_list R_KEY

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 100
    INT_TYPE        deslocar, e ir ao estado 2
    FLOAT_TYPE      deslocar, e ir ao estado 3
    DOUBLE_TYPE     deslocar, e ir ao estado 4
    STRING_TYPE     deslocar, e ir ao estado 5
    BOOLEAN_TYPE    deslocar, e ir ao estado 6
    MATRIZ_TYPE     deslocar, e ir ao estado 7
    VOID_TYPE       deslocar, e ir ao estado 8
    LITERAL_CHAR    deslocar, e ir ao estado 28
    CHAR_TYPE       deslocar, e ir ao estado 9
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34
    IF_STM          deslocar, e ir ao estado 101
    FOR_STM         deslocar, e ir ao estado 102
    DO_STM          deslocar, e ir ao estado 103
    WHILE_STM       deslocar, e ir ao estado 104
    SWITCH_STM      deslocar, e ir ao estado 105
    PRINT           deslocar, e ir ao estado 106
    PRINTF          deslocar, e ir ao estado 107

    stm_list         ir ao estado 108
    stm              ir ao estado 109
    decl             ir ao estado 110
    assingment       ir ao estado 111
    initialization   ir ao estado 112
    print_stm        ir ao estado 113
    expres_list      ir ao estado 114
    expr             ir ao estado 115
    cond_stm         ir ao estado 116
    if_struct        ir ao estado 117
    switch_struct    ir ao estado 118
    loop_stm         ir ao estado 119
    while_struct     ir ao estado 120
    for_struct       ir ao estado 121
    uniry_op         ir ao estado 122
    fun_call         ir ao estado 123
    type             ir ao estado 124
    arit_expr        ir ao estado 125
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 100

   20 assingment: IDENTIFIER . ASSINGMENT expr
   56 fun_call: IDENTIFIER . L_PARENTHESIS $@3 param_list_call R_PARENTHESIS
  106 term: IDENTIFIER .

    ASSINGMENT     deslocar, e ir ao estado 18
    L_PARENTHESIS  deslocar, e ir ao estado 126

    $padrão  reduzir usando a regra 106 (term)


Estado 101

   34 if_struct: IF_STM . L_PARENTHESIS log_expr R_PARENTHESIS block else_struct

    L_PARENTHESIS  deslocar, e ir ao estado 127


Estado 102

   50 for_struct: FOR_STM . L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON for_struct_stm R_PARENTHESIS $@2 block

    L_PARENTHESIS  deslocar, e ir ao estado 128


Estado 103

   47 while_struct: DO_STM . block WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS SEMICOLON

    L_KEY  deslocar, e ir ao estado 97

    block  ir ao estado 129


Estado 104

   46 while_struct: WHILE_STM . L_PARENTHESIS log_expr R_PARENTHESIS block

    L_PARENTHESIS  deslocar, e ir ao estado 130


Estado 105

   40 switch_struct: SWITCH_STM . L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    L_PARENTHESIS  deslocar, e ir ao estado 131


Estado 106

   22 print_stm: PRINT . L_PARENTHESIS literal_string R_PARENTHESIS
   23          | PRINT . L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS

    L_PARENTHESIS  deslocar, e ir ao estado 132


Estado 107

   24 print_stm: PRINTF . L_PARENTHESIS literal_string R_PARENTHESIS
   25          | PRINTF . L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS

    L_PARENTHESIS  deslocar, e ir ao estado 133


Estado 108

   61 block: L_KEY $@6 stm_list . R_KEY

    R_KEY  deslocar, e ir ao estado 134


Estado 109

    4 stm_list: stm .
    5         | stm . stm_list

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 100
    INT_TYPE        deslocar, e ir ao estado 2
    FLOAT_TYPE      deslocar, e ir ao estado 3
    DOUBLE_TYPE     deslocar, e ir ao estado 4
    STRING_TYPE     deslocar, e ir ao estado 5
    BOOLEAN_TYPE    deslocar, e ir ao estado 6
    MATRIZ_TYPE     deslocar, e ir ao estado 7
    VOID_TYPE       deslocar, e ir ao estado 8
    LITERAL_CHAR    deslocar, e ir ao estado 28
    CHAR_TYPE       deslocar, e ir ao estado 9
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34
    IF_STM          deslocar, e ir ao estado 101
    FOR_STM         deslocar, e ir ao estado 102
    DO_STM          deslocar, e ir ao estado 103
    WHILE_STM       deslocar, e ir ao estado 104
    SWITCH_STM      deslocar, e ir ao estado 105
    PRINT           deslocar, e ir ao estado 106
    PRINTF          deslocar, e ir ao estado 107

    $padrão  reduzir usando a regra 4 (stm_list)

    stm_list         ir ao estado 135
    stm              ir ao estado 109
    decl             ir ao estado 110
    assingment       ir ao estado 111
    initialization   ir ao estado 112
    print_stm        ir ao estado 113
    expres_list      ir ao estado 114
    expr             ir ao estado 115
    cond_stm         ir ao estado 116
    if_struct        ir ao estado 117
    switch_struct    ir ao estado 118
    loop_stm         ir ao estado 119
    while_struct     ir ao estado 120
    for_struct       ir ao estado 121
    uniry_op         ir ao estado 122
    fun_call         ir ao estado 123
    type             ir ao estado 124
    arit_expr        ir ao estado 125
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 110

    6 stm: decl . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 136


Estado 111

   11 stm: assingment . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 137


Estado 112

   12 stm: initialization . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 138


Estado 113

    9 stm: print_stm . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 139


Estado 114

   10 stm: expres_list . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 140


Estado 115

   28 expres_list: expr . SEMICOLON
   29            | expr . SEMICOLON expres_list

    SEMICOLON  deslocar, e ir ao estado 141


Estado 116

    7 stm: cond_stm .

    $padrão  reduzir usando a regra 7 (stm)


Estado 117

   32 cond_stm: if_struct .

    $padrão  reduzir usando a regra 32 (cond_stm)


Estado 118

   33 cond_stm: switch_struct .

    $padrão  reduzir usando a regra 33 (cond_stm)


Estado 119

    8 stm: loop_stm .

    $padrão  reduzir usando a regra 8 (stm)


Estado 120

   44 loop_stm: while_struct .

    $padrão  reduzir usando a regra 44 (loop_stm)


Estado 121

   45 loop_stm: for_struct .

    $padrão  reduzir usando a regra 45 (loop_stm)


Estado 122

   13 stm: uniry_op . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 142


Estado 123

   14 stm: fun_call . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 143


Estado 124

   19 decl: type . id_list
   21 initialization: type . IDENTIFIER ASSINGMENT expr

    IDENTIFIER  deslocar, e ir ao estado 144

    id_list  ir ao estado 25


Estado 125

   31 expr: arit_expr .
   53 uniry_op: arit_expr . INC_OP
   54         | arit_expr . DEC_OP
   75 arit_expr: arit_expr . PLUS_OP base
   76          | arit_expr . SUB_OP base
   77          | arit_expr . DIV_OP base
   78          | arit_expr . STAR base
   79          | arit_expr . MOD_OP base
   88 comp_expr: arit_expr .

    PLUS_OP  deslocar, e ir ao estado 51
    SUB_OP   deslocar, e ir ao estado 52
    DIV_OP   deslocar, e ir ao estado 53
    STAR     deslocar, e ir ao estado 54
    MOD_OP   deslocar, e ir ao estado 55
    INC_OP   deslocar, e ir ao estado 145
    DEC_OP   deslocar, e ir ao estado 146

    SEMICOLON  reduzir usando a regra 31 (expr)
    SEMICOLON  [reduzir usando a regra 88 (comp_expr)]
    $padrão   reduzir usando a regra 88 (comp_expr)


Estado 126

   56 fun_call: IDENTIFIER L_PARENTHESIS . $@3 param_list_call R_PARENTHESIS

    $padrão  reduzir usando a regra 55 ($@3)

    $@3  ir ao estado 147


Estado 127

   34 if_struct: IF_STM L_PARENTHESIS . log_expr R_PARENTHESIS block else_struct

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    arit_expr        ir ao estado 83
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 148
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 128

   50 for_struct: FOR_STM L_PARENTHESIS . $@1 initialization SEMICOLON log_expr SEMICOLON for_struct_stm R_PARENTHESIS $@2 block

    $padrão  reduzir usando a regra 48 ($@1)

    $@1  ir ao estado 149


Estado 129

   47 while_struct: DO_STM block . WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS SEMICOLON

    WHILE_STM  deslocar, e ir ao estado 150


Estado 130

   46 while_struct: WHILE_STM L_PARENTHESIS . log_expr R_PARENTHESIS block

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    arit_expr        ir ao estado 83
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 151
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 131

   40 switch_struct: SWITCH_STM L_PARENTHESIS . literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33

    term            ir ao estado 152
    term_num        ir ao estado 43
    log_term        ir ao estado 44
    literal_term    ir ao estado 153
    literal_string  ir ao estado 154


Estado 132

   22 print_stm: PRINT L_PARENTHESIS . literal_string R_PARENTHESIS
   23          | PRINT L_PARENTHESIS . literal_string COMMA id_list R_PARENTHESIS

    LITERAL_STRING  deslocar, e ir ao estado 26
    LITERAL_CHAR    deslocar, e ir ao estado 28

    literal_string  ir ao estado 155


Estado 133

   24 print_stm: PRINTF L_PARENTHESIS . literal_string R_PARENTHESIS
   25          | PRINTF L_PARENTHESIS . literal_string COMMA id_list R_PARENTHESIS

    LITERAL_STRING  deslocar, e ir ao estado 26
    LITERAL_CHAR    deslocar, e ir ao estado 28

    literal_string  ir ao estado 156


Estado 134

   61 block: L_KEY $@6 stm_list R_KEY .

    $padrão  reduzir usando a regra 61 (block)


Estado 135

    5 stm_list: stm stm_list .

    $padrão  reduzir usando a regra 5 (stm_list)


Estado 136

    6 stm: decl SEMICOLON .

    $padrão  reduzir usando a regra 6 (stm)


Estado 137

   11 stm: assingment SEMICOLON .

    $padrão  reduzir usando a regra 11 (stm)


Estado 138

   12 stm: initialization SEMICOLON .

    $padrão  reduzir usando a regra 12 (stm)


Estado 139

    9 stm: print_stm SEMICOLON .

    $padrão  reduzir usando a regra 9 (stm)


Estado 140

   10 stm: expres_list SEMICOLON .

    $padrão  reduzir usando a regra 10 (stm)


Estado 141

   28 expres_list: expr SEMICOLON .
   29            | expr SEMICOLON . expres_list

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    $padrão  reduzir usando a regra 28 (expres_list)

    expres_list      ir ao estado 157
    expr             ir ao estado 115
    arit_expr        ir ao estado 36
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 142

   13 stm: uniry_op SEMICOLON .

    $padrão  reduzir usando a regra 13 (stm)


Estado 143

   14 stm: fun_call SEMICOLON .

    $padrão  reduzir usando a regra 14 (stm)


Estado 144

   21 initialization: type IDENTIFIER . ASSINGMENT expr
   26 id_list: IDENTIFIER .
   27        | IDENTIFIER . COMMA id_list

    ASSINGMENT  deslocar, e ir ao estado 46
    COMMA       deslocar, e ir ao estado 48

    $padrão  reduzir usando a regra 26 (id_list)


Estado 145

   53 uniry_op: arit_expr INC_OP .

    $padrão  reduzir usando a regra 53 (uniry_op)


Estado 146

   54 uniry_op: arit_expr DEC_OP .

    $padrão  reduzir usando a regra 54 (uniry_op)


Estado 147

   56 fun_call: IDENTIFIER L_PARENTHESIS $@3 . param_list_call R_PARENTHESIS

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    $padrão  reduzir usando a regra 101 (param_list_call)

    expr             ir ao estado 158
    arit_expr        ir ao estado 36
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    param_list_call  ir ao estado 159
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 148

   34 if_struct: IF_STM L_PARENTHESIS log_expr . R_PARENTHESIS block else_struct
   87 log_expr: log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 57
    OR_OP          deslocar, e ir ao estado 58
    NOT_OP         deslocar, e ir ao estado 59
    R_PARENTHESIS  deslocar, e ir ao estado 160

    op_log  ir ao estado 60


Estado 149

   50 for_struct: FOR_STM L_PARENTHESIS $@1 . initialization SEMICOLON log_expr SEMICOLON for_struct_stm R_PARENTHESIS $@2 block

    INT_TYPE      deslocar, e ir ao estado 2
    FLOAT_TYPE    deslocar, e ir ao estado 3
    DOUBLE_TYPE   deslocar, e ir ao estado 4
    STRING_TYPE   deslocar, e ir ao estado 5
    BOOLEAN_TYPE  deslocar, e ir ao estado 6
    MATRIZ_TYPE   deslocar, e ir ao estado 7
    VOID_TYPE     deslocar, e ir ao estado 8
    CHAR_TYPE     deslocar, e ir ao estado 9

    initialization  ir ao estado 161
    type            ir ao estado 162


Estado 150

   47 while_struct: DO_STM block WHILE_STM . L_PARENTHESIS log_expr R_PARENTHESIS SEMICOLON

    L_PARENTHESIS  deslocar, e ir ao estado 163


Estado 151

   46 while_struct: WHILE_STM L_PARENTHESIS log_expr . R_PARENTHESIS block
   87 log_expr: log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 57
    OR_OP          deslocar, e ir ao estado 58
    NOT_OP         deslocar, e ir ao estado 59
    R_PARENTHESIS  deslocar, e ir ao estado 164

    op_log  ir ao estado 60


Estado 152

  112 literal_term: term .

    $padrão  reduzir usando a regra 112 (literal_term)


Estado 153

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term . R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    R_PARENTHESIS  deslocar, e ir ao estado 165


Estado 154

  113 literal_term: literal_string .

    $padrão  reduzir usando a regra 113 (literal_term)


Estado 155

   22 print_stm: PRINT L_PARENTHESIS literal_string . R_PARENTHESIS
   23          | PRINT L_PARENTHESIS literal_string . COMMA id_list R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 166
    COMMA          deslocar, e ir ao estado 167


Estado 156

   24 print_stm: PRINTF L_PARENTHESIS literal_string . R_PARENTHESIS
   25          | PRINTF L_PARENTHESIS literal_string . COMMA id_list R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 168
    COMMA          deslocar, e ir ao estado 169


Estado 157

   29 expres_list: expr SEMICOLON expres_list .

    $padrão  reduzir usando a regra 29 (expres_list)


Estado 158

  102 param_list_call: expr .
  103                | expr . COMMA param_list_call

    COMMA  deslocar, e ir ao estado 170

    $padrão  reduzir usando a regra 102 (param_list_call)


Estado 159

   56 fun_call: IDENTIFIER L_PARENTHESIS $@3 param_list_call . R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 171


Estado 160

   34 if_struct: IF_STM L_PARENTHESIS log_expr R_PARENTHESIS . block else_struct

    L_KEY  deslocar, e ir ao estado 97

    block  ir ao estado 172


Estado 161

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization . SEMICOLON log_expr SEMICOLON for_struct_stm R_PARENTHESIS $@2 block

    SEMICOLON  deslocar, e ir ao estado 173


Estado 162

   21 initialization: type . IDENTIFIER ASSINGMENT expr

    IDENTIFIER  deslocar, e ir ao estado 174


Estado 163

   47 while_struct: DO_STM block WHILE_STM L_PARENTHESIS . log_expr R_PARENTHESIS SEMICOLON

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    arit_expr        ir ao estado 83
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 175
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 164

   46 while_struct: WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS . block

    L_KEY  deslocar, e ir ao estado 97

    block  ir ao estado 176


Estado 165

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS . L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    L_KEY  deslocar, e ir ao estado 177


Estado 166

   22 print_stm: PRINT L_PARENTHESIS literal_string R_PARENTHESIS .

    $padrão  reduzir usando a regra 22 (print_stm)


Estado 167

   23 print_stm: PRINT L_PARENTHESIS literal_string COMMA . id_list R_PARENTHESIS

    IDENTIFIER  deslocar, e ir ao estado 72

    id_list  ir ao estado 178


Estado 168

   24 print_stm: PRINTF L_PARENTHESIS literal_string R_PARENTHESIS .

    $padrão  reduzir usando a regra 24 (print_stm)


Estado 169

   25 print_stm: PRINTF L_PARENTHESIS literal_string COMMA . id_list R_PARENTHESIS

    IDENTIFIER  deslocar, e ir ao estado 72

    id_list  ir ao estado 179


Estado 170

  103 param_list_call: expr COMMA . param_list_call

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    $padrão  reduzir usando a regra 101 (param_list_call)

    expr             ir ao estado 158
    arit_expr        ir ao estado 36
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    param_list_call  ir ao estado 180
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 171

   56 fun_call: IDENTIFIER L_PARENTHESIS $@3 param_list_call R_PARENTHESIS .

    $padrão  reduzir usando a regra 56 (fun_call)


Estado 172

   34 if_struct: IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block . else_struct

    ELSE_IF_STM  deslocar, e ir ao estado 181

    ELSE_STM  reduzir usando a regra 37 (elseif_list)
    $padrão  reduzir usando a regra 35 (else_struct)

    else_struct    ir ao estado 182
    elseif_list    ir ao estado 183
    elseif_struct  ir ao estado 184


Estado 173

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON . log_expr SEMICOLON for_struct_stm R_PARENTHESIS $@2 block

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    arit_expr        ir ao estado 83
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 185
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 174

   21 initialization: type IDENTIFIER . ASSINGMENT expr

    ASSINGMENT  deslocar, e ir ao estado 46


Estado 175

   47 while_struct: DO_STM block WHILE_STM L_PARENTHESIS log_expr . R_PARENTHESIS SEMICOLON
   87 log_expr: log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 57
    OR_OP          deslocar, e ir ao estado 58
    NOT_OP         deslocar, e ir ao estado 59
    R_PARENTHESIS  deslocar, e ir ao estado 186

    op_log  ir ao estado 60


Estado 176

   46 while_struct: WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS block .

    $padrão  reduzir usando a regra 46 (while_struct)


Estado 177

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY . case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    CASE  deslocar, e ir ao estado 187

    $padrão  reduzir usando a regra 41 (case_list_switch)

    case_list_switch  ir ao estado 188
    case_switch       ir ao estado 189


Estado 178

   23 print_stm: PRINT L_PARENTHESIS literal_string COMMA id_list . R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 190


Estado 179

   25 print_stm: PRINTF L_PARENTHESIS literal_string COMMA id_list . R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 191


Estado 180

  103 param_list_call: expr COMMA param_list_call .

    $padrão  reduzir usando a regra 103 (param_list_call)


Estado 181

   39 elseif_struct: ELSE_IF_STM . L_PARENTHESIS log_expr R_PARENTHESIS block

    L_PARENTHESIS  deslocar, e ir ao estado 192


Estado 182

   34 if_struct: IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block else_struct .

    $padrão  reduzir usando a regra 34 (if_struct)


Estado 183

   36 else_struct: elseif_list . ELSE_STM block

    ELSE_STM  deslocar, e ir ao estado 193


Estado 184

   38 elseif_list: elseif_struct . elseif_list

    ELSE_IF_STM  deslocar, e ir ao estado 181

    $padrão  reduzir usando a regra 37 (elseif_list)

    elseif_list    ir ao estado 194
    elseif_struct  ir ao estado 184


Estado 185

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr . SEMICOLON for_struct_stm R_PARENTHESIS $@2 block
   87 log_expr: log_expr . op_log comp_expr

    AND_OP     deslocar, e ir ao estado 57
    OR_OP      deslocar, e ir ao estado 58
    NOT_OP     deslocar, e ir ao estado 59
    SEMICOLON  deslocar, e ir ao estado 195

    op_log  ir ao estado 60


Estado 186

   47 while_struct: DO_STM block WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 196


Estado 187

   43 case_switch: CASE . literal_term DOUBLE_DOT stm_list BREAK SEMICOLON

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33

    term            ir ao estado 152
    term_num        ir ao estado 43
    log_term        ir ao estado 44
    literal_term    ir ao estado 197
    literal_string  ir ao estado 154


Estado 188

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch . DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    DEFAULT  deslocar, e ir ao estado 198


Estado 189

   42 case_list_switch: case_switch . case_list_switch

    CASE  deslocar, e ir ao estado 187

    $padrão  reduzir usando a regra 41 (case_list_switch)

    case_list_switch  ir ao estado 199
    case_switch       ir ao estado 189


Estado 190

   23 print_stm: PRINT L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS .

    $padrão  reduzir usando a regra 23 (print_stm)


Estado 191

   25 print_stm: PRINTF L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS .

    $padrão  reduzir usando a regra 25 (print_stm)


Estado 192

   39 elseif_struct: ELSE_IF_STM L_PARENTHESIS . log_expr R_PARENTHESIS block

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 27
    LITERAL_CHAR    deslocar, e ir ao estado 28
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34

    arit_expr        ir ao estado 83
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 200
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 193

   36 else_struct: elseif_list ELSE_STM . block

    L_KEY  deslocar, e ir ao estado 97

    block  ir ao estado 201


Estado 194

   38 elseif_list: elseif_struct elseif_list .

    $padrão  reduzir usando a regra 38 (elseif_list)


Estado 195

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON . for_struct_stm R_PARENTHESIS $@2 block

    IDENTIFIER      deslocar, e ir ao estado 202
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 76

    assingment       ir ao estado 203
    for_struct_stm   ir ao estado 204
    uniry_op         ir ao estado 205
    arit_expr        ir ao estado 206
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44


Estado 196

   47 while_struct: DO_STM block WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS SEMICOLON .

    $padrão  reduzir usando a regra 47 (while_struct)


Estado 197

   43 case_switch: CASE literal_term . DOUBLE_DOT stm_list BREAK SEMICOLON

    DOUBLE_DOT  deslocar, e ir ao estado 207


Estado 198

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT . DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    DOUBLE_DOT  deslocar, e ir ao estado 208


Estado 199

   42 case_list_switch: case_switch case_list_switch .

    $padrão  reduzir usando a regra 42 (case_list_switch)


Estado 200

   39 elseif_struct: ELSE_IF_STM L_PARENTHESIS log_expr . R_PARENTHESIS block
   87 log_expr: log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 57
    OR_OP          deslocar, e ir ao estado 58
    NOT_OP         deslocar, e ir ao estado 59
    R_PARENTHESIS  deslocar, e ir ao estado 209

    op_log  ir ao estado 60


Estado 201

   36 else_struct: elseif_list ELSE_STM block .

    $padrão  reduzir usando a regra 36 (else_struct)


Estado 202

   20 assingment: IDENTIFIER . ASSINGMENT expr
  106 term: IDENTIFIER .

    ASSINGMENT  deslocar, e ir ao estado 18

    $padrão  reduzir usando a regra 106 (term)


Estado 203

   52 for_struct_stm: assingment .

    $padrão  reduzir usando a regra 52 (for_struct_stm)


Estado 204

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON for_struct_stm . R_PARENTHESIS $@2 block

    R_PARENTHESIS  deslocar, e ir ao estado 210


Estado 205

   51 for_struct_stm: uniry_op .

    $padrão  reduzir usando a regra 51 (for_struct_stm)


Estado 206

   53 uniry_op: arit_expr . INC_OP
   54         | arit_expr . DEC_OP
   75 arit_expr: arit_expr . PLUS_OP base
   76          | arit_expr . SUB_OP base
   77          | arit_expr . DIV_OP base
   78          | arit_expr . STAR base
   79          | arit_expr . MOD_OP base

    PLUS_OP  deslocar, e ir ao estado 51
    SUB_OP   deslocar, e ir ao estado 52
    DIV_OP   deslocar, e ir ao estado 53
    STAR     deslocar, e ir ao estado 54
    MOD_OP   deslocar, e ir ao estado 55
    INC_OP   deslocar, e ir ao estado 145
    DEC_OP   deslocar, e ir ao estado 146


Estado 207

   43 case_switch: CASE literal_term DOUBLE_DOT . stm_list BREAK SEMICOLON

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 100
    INT_TYPE        deslocar, e ir ao estado 2
    FLOAT_TYPE      deslocar, e ir ao estado 3
    DOUBLE_TYPE     deslocar, e ir ao estado 4
    STRING_TYPE     deslocar, e ir ao estado 5
    BOOLEAN_TYPE    deslocar, e ir ao estado 6
    MATRIZ_TYPE     deslocar, e ir ao estado 7
    VOID_TYPE       deslocar, e ir ao estado 8
    LITERAL_CHAR    deslocar, e ir ao estado 28
    CHAR_TYPE       deslocar, e ir ao estado 9
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34
    IF_STM          deslocar, e ir ao estado 101
    FOR_STM         deslocar, e ir ao estado 102
    DO_STM          deslocar, e ir ao estado 103
    WHILE_STM       deslocar, e ir ao estado 104
    SWITCH_STM      deslocar, e ir ao estado 105
    PRINT           deslocar, e ir ao estado 106
    PRINTF          deslocar, e ir ao estado 107

    stm_list         ir ao estado 211
    stm              ir ao estado 109
    decl             ir ao estado 110
    assingment       ir ao estado 111
    initialization   ir ao estado 112
    print_stm        ir ao estado 113
    expres_list      ir ao estado 114
    expr             ir ao estado 115
    cond_stm         ir ao estado 116
    if_struct        ir ao estado 117
    switch_struct    ir ao estado 118
    loop_stm         ir ao estado 119
    while_struct     ir ao estado 120
    for_struct       ir ao estado 121
    uniry_op         ir ao estado 122
    fun_call         ir ao estado 123
    type             ir ao estado 124
    arit_expr        ir ao estado 125
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 208

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT . stm_list BREAK SEMICOLON R_KEY

    LITERAL_STRING  deslocar, e ir ao estado 26
    IDENTIFIER      deslocar, e ir ao estado 100
    INT_TYPE        deslocar, e ir ao estado 2
    FLOAT_TYPE      deslocar, e ir ao estado 3
    DOUBLE_TYPE     deslocar, e ir ao estado 4
    STRING_TYPE     deslocar, e ir ao estado 5
    BOOLEAN_TYPE    deslocar, e ir ao estado 6
    MATRIZ_TYPE     deslocar, e ir ao estado 7
    VOID_TYPE       deslocar, e ir ao estado 8
    LITERAL_CHAR    deslocar, e ir ao estado 28
    CHAR_TYPE       deslocar, e ir ao estado 9
    LITERAL_INT     deslocar, e ir ao estado 29
    LITERAL_FLOAT   deslocar, e ir ao estado 30
    LITERAL_DOUBLE  deslocar, e ir ao estado 31
    TRUE_VAL        deslocar, e ir ao estado 32
    FALSE_VAL       deslocar, e ir ao estado 33
    L_PARENTHESIS   deslocar, e ir ao estado 34
    IF_STM          deslocar, e ir ao estado 101
    FOR_STM         deslocar, e ir ao estado 102
    DO_STM          deslocar, e ir ao estado 103
    WHILE_STM       deslocar, e ir ao estado 104
    SWITCH_STM      deslocar, e ir ao estado 105
    PRINT           deslocar, e ir ao estado 106
    PRINTF          deslocar, e ir ao estado 107

    stm_list         ir ao estado 212
    stm              ir ao estado 109
    decl             ir ao estado 110
    assingment       ir ao estado 111
    initialization   ir ao estado 112
    print_stm        ir ao estado 113
    expres_list      ir ao estado 114
    expr             ir ao estado 115
    cond_stm         ir ao estado 116
    if_struct        ir ao estado 117
    switch_struct    ir ao estado 118
    loop_stm         ir ao estado 119
    while_struct     ir ao estado 120
    for_struct       ir ao estado 121
    uniry_op         ir ao estado 122
    fun_call         ir ao estado 123
    type             ir ao estado 124
    arit_expr        ir ao estado 125
    base             ir ao estado 37
    arit_expr_right  ir ao estado 38
    arit_expr_base   ir ao estado 39
    log_expr         ir ao estado 40
    comp_expr        ir ao estado 41
    term             ir ao estado 42
    term_num         ir ao estado 43
    log_term         ir ao estado 44
    literal_string   ir ao estado 45


Estado 209

   39 elseif_struct: ELSE_IF_STM L_PARENTHESIS log_expr R_PARENTHESIS . block

    L_KEY  deslocar, e ir ao estado 97

    block  ir ao estado 213


Estado 210

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON for_struct_stm R_PARENTHESIS . $@2 block

    $padrão  reduzir usando a regra 49 ($@2)

    $@2  ir ao estado 214


Estado 211

   43 case_switch: CASE literal_term DOUBLE_DOT stm_list . BREAK SEMICOLON

    BREAK  deslocar, e ir ao estado 215


Estado 212

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list . BREAK SEMICOLON R_KEY

    BREAK  deslocar, e ir ao estado 216


Estado 213

   39 elseif_struct: ELSE_IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block .

    $padrão  reduzir usando a regra 39 (elseif_struct)


Estado 214

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON for_struct_stm R_PARENTHESIS $@2 . block

    L_KEY  deslocar, e ir ao estado 97

    block  ir ao estado 217


Estado 215

   43 case_switch: CASE literal_term DOUBLE_DOT stm_list BREAK . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 218


Estado 216

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK . SEMICOLON R_KEY

    SEMICOLON  deslocar, e ir ao estado 219


Estado 217

   50 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON for_struct_stm R_PARENTHESIS $@2 block .

    $padrão  reduzir usando a regra 50 (for_struct)


Estado 218

   43 case_switch: CASE literal_term DOUBLE_DOT stm_list BREAK SEMICOLON .

    $padrão  reduzir usando a regra 43 (case_switch)


Estado 219

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON . R_KEY

    R_KEY  deslocar, e ir ao estado 220


Estado 220

   40 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY .

    $padrão  reduzir usando a regra 40 (switch_struct)
