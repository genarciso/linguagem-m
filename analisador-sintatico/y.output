Terminais sem uso na gramática

    FACT_OP
    L_BRACKET
    R_BRACKET
    CONTINUE
    CONSTANT
    RETURN
    EOL
    ADDRESS
    DOT
    MALLOC_OP
    FREE_OP
    CALLOC_OP


Estado 42 conflitos: 1 de redução/redução
Estado 52 conflitos: 1 de deslocamento/redução


Gramática

    0 $accept: program $end

    1 program: stm_list

    2 stm_list: stm SEMICOLON
    3         | stm SEMICOLON stm_list

    4 stm: decl
    5    | cond_stm
    6    | loop_stm
    7    | fun_struct
    8    | print_stm
    9    | expres_list
   10    | assingment
   11    | initialization

   12 decl: type id_list

   13 assingment: IDENTIFIER ASSINGMENT expr

   14 initialization: type IDENTIFIER ASSINGMENT expr

   15 print_stm: PRINT L_PARENTHESIS literal_string R_PARENTHESIS
   16          | PRINT L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS
   17          | PRINTF L_PARENTHESIS literal_string R_PARENTHESIS
   18          | PRINTF L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS

   19 id_list: IDENTIFIER
   20        | IDENTIFIER COMMA id_list

   21 expres_list: expr SEMICOLON
   22            | expr SEMICOLON expres_list

   23 expr: log_expr
   24     | arit_expr

   25 cond_stm: if_struct
   26         | switch_struct

   27 if_struct: IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block else_struct

   28 else_struct: %empty
   29            | elseif_list ELSE_STM block

   30 elseif_list: %empty
   31            | elseif_struct elseif_list

   32 elseif_struct: ELSE_IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

   34 case_list_switch: %empty
   35                 | case_switch case_list_switch

   36 case_switch: CASE literal_term DOUBLE_DOT stm_list BREAK SEMICOLON

   37 loop_stm: while_struct
   38         | for_struct

   39 while_struct: WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS block
   40             | DO_STM block WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS

   41 $@1: %empty

   42 $@2: %empty

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON arit_expr R_PARENTHESIS $@2 block

   44 fun_struct: type IDENTIFIER L_PARENTHESIS par_list R_PARENTHESIS L_KEY stm_list R_KEY

   45 $@3: %empty

   46 block: L_KEY $@3 stm_list R_KEY

   47 type: VOID_TYPE
   48     | INT_TYPE
   49     | FLOAT_TYPE
   50     | DOUBLE_TYPE
   51     | CHAR_TYPE
   52     | STRING_TYPE
   53     | BOOLEAN_TYPE
   54     | MATRIZ_TYPE

   55 par_list: %empty
   56         | par_term
   57         | par_term COMMA par_list

   58 par_term: type IDENTIFIER

   59 arit_expr: arit_expr_base
   60          | arit_expr PLUS_OP arit_expr_base
   61          | arit_expr SUB_OP arit_expr_base
   62          | arit_expr DIV_OP arit_expr_base
   63          | arit_expr STAR arit_expr_base
   64          | arit_expr MOD_OP arit_expr_base
   65          | arit_expr INC_OP
   66          | arit_expr DEC_OP

   67 arit_expr_base: term
   68               | L_PARENTHESIS arit_expr R_PARENTHESIS

   69 log_expr: comp_expr
   70         | L_PARENTHESIS log_expr R_PARENTHESIS
   71         | log_expr op_log comp_expr

   72 comp_expr: arit_expr
   73          | comp_expr op_comp arit_expr
   74          | literal_string EQ_OP literal_string
   75          | literal_string NE_OP literal_string

   76 op_log: AND_OP
   77       | OR_OP
   78       | NOT_OP

   79 op_comp: SE_OP
   80        | S_OP
   81        | GE_OP
   82        | G_OP
   83        | EQ_OP
   84        | NE_OP

   85 term: term_num
   86     | log_term
   87     | IDENTIFIER

   88 term_num: LITERAL_INT
   89         | LITERAL_FLOAT
   90         | LITERAL_DOUBLE

   91 log_term: TRUE_VAL
   92         | FALSE_VAL

   93 literal_term: term
   94             | literal_string

   95 literal_string: LITERAL_CHAR
   96               | LITERAL_STRING


Terminais, com as regras onde eles aparecem

    $end (0) 0
    error (256)
    LITERAL_STRING <sValue> (258) 96
    IDENTIFIER <sValue> (259) 13 14 19 20 44 58 87
    INT_TYPE <sValue> (260) 48
    FLOAT_TYPE <sValue> (261) 49
    DOUBLE_TYPE <sValue> (262) 50
    STRING_TYPE <sValue> (263) 52
    BOOLEAN_TYPE <sValue> (264) 53
    MATRIZ_TYPE <sValue> (265) 54
    VOID_TYPE <sValue> (266) 47
    LITERAL_CHAR <sValue> (267) 95
    CHAR_TYPE <sValue> (268) 51
    LITERAL_INT <iValue> (269) 88
    LITERAL_FLOAT <fValue> (270) 89
    LITERAL_DOUBLE <dValue> (271) 90
    TRUE_VAL <bValue> (272) 91
    FALSE_VAL <bValue> (273) 92
    PLUS_OP (274) 60
    SUB_OP (275) 61
    DIV_OP (276) 62
    STAR (277) 63
    MOD_OP (278) 64
    FACT_OP (279)
    ASSINGMENT (280) 13 14
    INC_OP (281) 65
    DEC_OP (282) 66
    GE_OP (283) 81
    SE_OP (284) 79
    EQ_OP (285) 74 83
    NE_OP (286) 75 84
    G_OP (287) 82
    S_OP (288) 80
    AND_OP (289) 76
    OR_OP (290) 77
    NOT_OP (291) 78
    L_PARENTHESIS (292) 15 16 17 18 27 32 33 39 40 43 44 68 70
    R_PARENTHESIS (293) 15 16 17 18 27 32 33 39 40 43 44 68 70
    L_KEY (294) 33 44 46
    R_KEY (295) 33 44 46
    L_BRACKET (296)
    R_BRACKET (297)
    IF_STM (298) 27
    ELSE_STM (299) 29
    ELSE_IF_STM (300) 32
    FOR_STM (301) 43
    DO_STM (302) 40
    WHILE_STM (303) 39 40
    SWITCH_STM (304) 33
    CONTINUE (305)
    BREAK (306) 33 36
    PRINT (307) 15 16
    PRINTF (308) 17 18
    CASE (309) 36
    DEFAULT (310) 33
    CONSTANT (311)
    RETURN (312)
    EOL (313)
    ADDRESS (314)
    SEMICOLON (315) 2 3 21 22 33 36 43
    COMMA (316) 16 18 20 57
    DOT (317)
    DOUBLE_DOT (318) 33 36
    MALLOC_OP (319)
    FREE_OP (320)
    CALLOC_OP (321)


Não terminais com as regras onde eles aparecem

    $accept (67)
        à esquerda: 0
    program (68)
        à esquerda: 1
        à direita: 0
    stm_list <sValue> (69)
        à esquerda: 2 3
        à direita: 1 3 33 36 44 46
    stm <sValue> (70)
        à esquerda: 4 5 6 7 8 9 10 11
        à direita: 2 3
    decl <sValue> (71)
        à esquerda: 12
        à direita: 4
    assingment <sValue> (72)
        à esquerda: 13
        à direita: 10
    initialization <sValue> (73)
        à esquerda: 14
        à direita: 11 43
    print_stm <sValue> (74)
        à esquerda: 15 16 17 18
        à direita: 8
    id_list <sValue> (75)
        à esquerda: 19 20
        à direita: 12 16 18 20
    expres_list <sValue> (76)
        à esquerda: 21 22
        à direita: 9 22
    expr <strValue> (77)
        à esquerda: 23 24
        à direita: 13 14 21 22
    cond_stm <sValue> (78)
        à esquerda: 25 26
        à direita: 5
    if_struct <sValue> (79)
        à esquerda: 27
        à direita: 25
    else_struct <sValue> (80)
        à esquerda: 28 29
        à direita: 27
    elseif_list <sValue> (81)
        à esquerda: 30 31
        à direita: 29 31
    elseif_struct <sValue> (82)
        à esquerda: 32
        à direita: 31
    switch_struct <sValue> (83)
        à esquerda: 33
        à direita: 26
    case_list_switch <sValue> (84)
        à esquerda: 34 35
        à direita: 33 35
    case_switch <sValue> (85)
        à esquerda: 36
        à direita: 35
    loop_stm <sValue> (86)
        à esquerda: 37 38
        à direita: 6
    while_struct <sValue> (87)
        à esquerda: 39 40
        à direita: 37
    for_struct <sValue> (88)
        à esquerda: 43
        à direita: 38
    $@1 (89)
        à esquerda: 41
        à direita: 43
    $@2 (90)
        à esquerda: 42
        à direita: 43
    fun_struct <sValue> (91)
        à esquerda: 44
        à direita: 7
    block <sValue> (92)
        à esquerda: 46
        à direita: 27 29 32 39 40 43
    $@3 (93)
        à esquerda: 45
        à direita: 46
    type <sValue> (94)
        à esquerda: 47 48 49 50 51 52 53 54
        à direita: 12 14 44 58
    par_list <sValue> (95)
        à esquerda: 55 56 57
        à direita: 44 57
    par_term <sValue> (96)
        à esquerda: 58
        à direita: 56 57
    arit_expr <strValue> (97)
        à esquerda: 59 60 61 62 63 64 65 66
        à direita: 24 43 60 61 62 63 64 65 66 68 72 73
    arit_expr_base <strValue> (98)
        à esquerda: 67 68
        à direita: 59 60 61 62 63 64
    log_expr <strValue> (99)
        à esquerda: 69 70 71
        à direita: 23 27 32 39 40 43 70 71
    comp_expr <strValue> (100)
        à esquerda: 72 73 74 75
        à direita: 69 71 73
    op_log <sValue> (101)
        à esquerda: 76 77 78
        à direita: 71
    op_comp <sValue> (102)
        à esquerda: 79 80 81 82 83 84
        à direita: 73
    term <strValue> (103)
        à esquerda: 85 86 87
        à direita: 67 93
    term_num <strValue> (104)
        à esquerda: 88 89 90
        à direita: 85
    log_term <strValue> (105)
        à esquerda: 91 92
        à direita: 86
    literal_term <strValue> (106)
        à esquerda: 93 94
        à direita: 33 36
    literal_string <strValue> (107)
        à esquerda: 95 96
        à direita: 15 16 17 18 74 75 94


Estado 0

    0 $accept: . program $end

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 2
    INT_TYPE        deslocar, e ir ao estado 3
    FLOAT_TYPE      deslocar, e ir ao estado 4
    DOUBLE_TYPE     deslocar, e ir ao estado 5
    STRING_TYPE     deslocar, e ir ao estado 6
    BOOLEAN_TYPE    deslocar, e ir ao estado 7
    MATRIZ_TYPE     deslocar, e ir ao estado 8
    VOID_TYPE       deslocar, e ir ao estado 9
    LITERAL_CHAR    deslocar, e ir ao estado 10
    CHAR_TYPE       deslocar, e ir ao estado 11
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17
    IF_STM          deslocar, e ir ao estado 18
    FOR_STM         deslocar, e ir ao estado 19
    DO_STM          deslocar, e ir ao estado 20
    WHILE_STM       deslocar, e ir ao estado 21
    SWITCH_STM      deslocar, e ir ao estado 22
    PRINT           deslocar, e ir ao estado 23
    PRINTF          deslocar, e ir ao estado 24

    program         ir ao estado 25
    stm_list        ir ao estado 26
    stm             ir ao estado 27
    decl            ir ao estado 28
    assingment      ir ao estado 29
    initialization  ir ao estado 30
    print_stm       ir ao estado 31
    expres_list     ir ao estado 32
    expr            ir ao estado 33
    cond_stm        ir ao estado 34
    if_struct       ir ao estado 35
    switch_struct   ir ao estado 36
    loop_stm        ir ao estado 37
    while_struct    ir ao estado 38
    for_struct      ir ao estado 39
    fun_struct      ir ao estado 40
    type            ir ao estado 41
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 1

   96 literal_string: LITERAL_STRING .

    $padrão  reduzir usando a regra 96 (literal_string)


Estado 2

   13 assingment: IDENTIFIER . ASSINGMENT expr
   87 term: IDENTIFIER .

    ASSINGMENT  deslocar, e ir ao estado 50

    $padrão  reduzir usando a regra 87 (term)


Estado 3

   48 type: INT_TYPE .

    $padrão  reduzir usando a regra 48 (type)


Estado 4

   49 type: FLOAT_TYPE .

    $padrão  reduzir usando a regra 49 (type)


Estado 5

   50 type: DOUBLE_TYPE .

    $padrão  reduzir usando a regra 50 (type)


Estado 6

   52 type: STRING_TYPE .

    $padrão  reduzir usando a regra 52 (type)


Estado 7

   53 type: BOOLEAN_TYPE .

    $padrão  reduzir usando a regra 53 (type)


Estado 8

   54 type: MATRIZ_TYPE .

    $padrão  reduzir usando a regra 54 (type)


Estado 9

   47 type: VOID_TYPE .

    $padrão  reduzir usando a regra 47 (type)


Estado 10

   95 literal_string: LITERAL_CHAR .

    $padrão  reduzir usando a regra 95 (literal_string)


Estado 11

   51 type: CHAR_TYPE .

    $padrão  reduzir usando a regra 51 (type)


Estado 12

   88 term_num: LITERAL_INT .

    $padrão  reduzir usando a regra 88 (term_num)


Estado 13

   89 term_num: LITERAL_FLOAT .

    $padrão  reduzir usando a regra 89 (term_num)


Estado 14

   90 term_num: LITERAL_DOUBLE .

    $padrão  reduzir usando a regra 90 (term_num)


Estado 15

   91 log_term: TRUE_VAL .

    $padrão  reduzir usando a regra 91 (log_term)


Estado 16

   92 log_term: FALSE_VAL .

    $padrão  reduzir usando a regra 92 (log_term)


Estado 17

   68 arit_expr_base: L_PARENTHESIS . arit_expr R_PARENTHESIS
   70 log_expr: L_PARENTHESIS . log_expr R_PARENTHESIS

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    arit_expr       ir ao estado 52
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 53
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 18

   27 if_struct: IF_STM . L_PARENTHESIS log_expr R_PARENTHESIS block else_struct

    L_PARENTHESIS  deslocar, e ir ao estado 54


Estado 19

   43 for_struct: FOR_STM . L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON arit_expr R_PARENTHESIS $@2 block

    L_PARENTHESIS  deslocar, e ir ao estado 55


Estado 20

   40 while_struct: DO_STM . block WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS

    L_KEY  deslocar, e ir ao estado 56

    block  ir ao estado 57


Estado 21

   39 while_struct: WHILE_STM . L_PARENTHESIS log_expr R_PARENTHESIS block

    L_PARENTHESIS  deslocar, e ir ao estado 58


Estado 22

   33 switch_struct: SWITCH_STM . L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    L_PARENTHESIS  deslocar, e ir ao estado 59


Estado 23

   15 print_stm: PRINT . L_PARENTHESIS literal_string R_PARENTHESIS
   16          | PRINT . L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS

    L_PARENTHESIS  deslocar, e ir ao estado 60


Estado 24

   17 print_stm: PRINTF . L_PARENTHESIS literal_string R_PARENTHESIS
   18          | PRINTF . L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS

    L_PARENTHESIS  deslocar, e ir ao estado 61


Estado 25

    0 $accept: program . $end

    $end  deslocar, e ir ao estado 62


Estado 26

    1 program: stm_list .

    $padrão  reduzir usando a regra 1 (program)


Estado 27

    2 stm_list: stm . SEMICOLON
    3         | stm . SEMICOLON stm_list

    SEMICOLON  deslocar, e ir ao estado 63


Estado 28

    4 stm: decl .

    $padrão  reduzir usando a regra 4 (stm)


Estado 29

   10 stm: assingment .

    $padrão  reduzir usando a regra 10 (stm)


Estado 30

   11 stm: initialization .

    $padrão  reduzir usando a regra 11 (stm)


Estado 31

    8 stm: print_stm .

    $padrão  reduzir usando a regra 8 (stm)


Estado 32

    9 stm: expres_list .

    $padrão  reduzir usando a regra 9 (stm)


Estado 33

   21 expres_list: expr . SEMICOLON
   22            | expr . SEMICOLON expres_list

    SEMICOLON  deslocar, e ir ao estado 64


Estado 34

    5 stm: cond_stm .

    $padrão  reduzir usando a regra 5 (stm)


Estado 35

   25 cond_stm: if_struct .

    $padrão  reduzir usando a regra 25 (cond_stm)


Estado 36

   26 cond_stm: switch_struct .

    $padrão  reduzir usando a regra 26 (cond_stm)


Estado 37

    6 stm: loop_stm .

    $padrão  reduzir usando a regra 6 (stm)


Estado 38

   37 loop_stm: while_struct .

    $padrão  reduzir usando a regra 37 (loop_stm)


Estado 39

   38 loop_stm: for_struct .

    $padrão  reduzir usando a regra 38 (loop_stm)


Estado 40

    7 stm: fun_struct .

    $padrão  reduzir usando a regra 7 (stm)


Estado 41

   12 decl: type . id_list
   14 initialization: type . IDENTIFIER ASSINGMENT expr
   44 fun_struct: type . IDENTIFIER L_PARENTHESIS par_list R_PARENTHESIS L_KEY stm_list R_KEY

    IDENTIFIER  deslocar, e ir ao estado 65

    id_list  ir ao estado 66


Estado 42

   24 expr: arit_expr .
   60 arit_expr: arit_expr . PLUS_OP arit_expr_base
   61          | arit_expr . SUB_OP arit_expr_base
   62          | arit_expr . DIV_OP arit_expr_base
   63          | arit_expr . STAR arit_expr_base
   64          | arit_expr . MOD_OP arit_expr_base
   65          | arit_expr . INC_OP
   66          | arit_expr . DEC_OP
   72 comp_expr: arit_expr .

    PLUS_OP  deslocar, e ir ao estado 67
    SUB_OP   deslocar, e ir ao estado 68
    DIV_OP   deslocar, e ir ao estado 69
    STAR     deslocar, e ir ao estado 70
    MOD_OP   deslocar, e ir ao estado 71
    INC_OP   deslocar, e ir ao estado 72
    DEC_OP   deslocar, e ir ao estado 73

    SEMICOLON  reduzir usando a regra 24 (expr)
    SEMICOLON  [reduzir usando a regra 72 (comp_expr)]
    $padrão   reduzir usando a regra 72 (comp_expr)


Estado 43

   59 arit_expr: arit_expr_base .

    $padrão  reduzir usando a regra 59 (arit_expr)


Estado 44

   23 expr: log_expr .
   71 log_expr: log_expr . op_log comp_expr

    AND_OP  deslocar, e ir ao estado 74
    OR_OP   deslocar, e ir ao estado 75
    NOT_OP  deslocar, e ir ao estado 76

    $padrão  reduzir usando a regra 23 (expr)

    op_log  ir ao estado 77


Estado 45

   69 log_expr: comp_expr .
   73 comp_expr: comp_expr . op_comp arit_expr

    GE_OP  deslocar, e ir ao estado 78
    SE_OP  deslocar, e ir ao estado 79
    EQ_OP  deslocar, e ir ao estado 80
    NE_OP  deslocar, e ir ao estado 81
    G_OP   deslocar, e ir ao estado 82
    S_OP   deslocar, e ir ao estado 83

    $padrão  reduzir usando a regra 69 (log_expr)

    op_comp  ir ao estado 84


Estado 46

   67 arit_expr_base: term .

    $padrão  reduzir usando a regra 67 (arit_expr_base)


Estado 47

   85 term: term_num .

    $padrão  reduzir usando a regra 85 (term)


Estado 48

   86 term: log_term .

    $padrão  reduzir usando a regra 86 (term)


Estado 49

   74 comp_expr: literal_string . EQ_OP literal_string
   75          | literal_string . NE_OP literal_string

    EQ_OP  deslocar, e ir ao estado 85
    NE_OP  deslocar, e ir ao estado 86


Estado 50

   13 assingment: IDENTIFIER ASSINGMENT . expr

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    expr            ir ao estado 87
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 51

   87 term: IDENTIFIER .

    $padrão  reduzir usando a regra 87 (term)


Estado 52

   60 arit_expr: arit_expr . PLUS_OP arit_expr_base
   61          | arit_expr . SUB_OP arit_expr_base
   62          | arit_expr . DIV_OP arit_expr_base
   63          | arit_expr . STAR arit_expr_base
   64          | arit_expr . MOD_OP arit_expr_base
   65          | arit_expr . INC_OP
   66          | arit_expr . DEC_OP
   68 arit_expr_base: L_PARENTHESIS arit_expr . R_PARENTHESIS
   72 comp_expr: arit_expr .

    PLUS_OP        deslocar, e ir ao estado 67
    SUB_OP         deslocar, e ir ao estado 68
    DIV_OP         deslocar, e ir ao estado 69
    STAR           deslocar, e ir ao estado 70
    MOD_OP         deslocar, e ir ao estado 71
    INC_OP         deslocar, e ir ao estado 72
    DEC_OP         deslocar, e ir ao estado 73
    R_PARENTHESIS  deslocar, e ir ao estado 88

    R_PARENTHESIS  [reduzir usando a regra 72 (comp_expr)]
    $padrão       reduzir usando a regra 72 (comp_expr)


Estado 53

   70 log_expr: L_PARENTHESIS log_expr . R_PARENTHESIS
   71         | log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 74
    OR_OP          deslocar, e ir ao estado 75
    NOT_OP         deslocar, e ir ao estado 76
    R_PARENTHESIS  deslocar, e ir ao estado 89

    op_log  ir ao estado 77


Estado 54

   27 if_struct: IF_STM L_PARENTHESIS . log_expr R_PARENTHESIS block else_struct

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    arit_expr       ir ao estado 90
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 91
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 55

   43 for_struct: FOR_STM L_PARENTHESIS . $@1 initialization SEMICOLON log_expr SEMICOLON arit_expr R_PARENTHESIS $@2 block

    $padrão  reduzir usando a regra 41 ($@1)

    $@1  ir ao estado 92


Estado 56

   46 block: L_KEY . $@3 stm_list R_KEY

    $padrão  reduzir usando a regra 45 ($@3)

    $@3  ir ao estado 93


Estado 57

   40 while_struct: DO_STM block . WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS

    WHILE_STM  deslocar, e ir ao estado 94


Estado 58

   39 while_struct: WHILE_STM L_PARENTHESIS . log_expr R_PARENTHESIS block

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    arit_expr       ir ao estado 90
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 95
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 59

   33 switch_struct: SWITCH_STM L_PARENTHESIS . literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16

    term            ir ao estado 96
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_term    ir ao estado 97
    literal_string  ir ao estado 98


Estado 60

   15 print_stm: PRINT L_PARENTHESIS . literal_string R_PARENTHESIS
   16          | PRINT L_PARENTHESIS . literal_string COMMA id_list R_PARENTHESIS

    LITERAL_STRING  deslocar, e ir ao estado 1
    LITERAL_CHAR    deslocar, e ir ao estado 10

    literal_string  ir ao estado 99


Estado 61

   17 print_stm: PRINTF L_PARENTHESIS . literal_string R_PARENTHESIS
   18          | PRINTF L_PARENTHESIS . literal_string COMMA id_list R_PARENTHESIS

    LITERAL_STRING  deslocar, e ir ao estado 1
    LITERAL_CHAR    deslocar, e ir ao estado 10

    literal_string  ir ao estado 100


Estado 62

    0 $accept: program $end .

    $padrão  aceitar


Estado 63

    2 stm_list: stm SEMICOLON .
    3         | stm SEMICOLON . stm_list

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 2
    INT_TYPE        deslocar, e ir ao estado 3
    FLOAT_TYPE      deslocar, e ir ao estado 4
    DOUBLE_TYPE     deslocar, e ir ao estado 5
    STRING_TYPE     deslocar, e ir ao estado 6
    BOOLEAN_TYPE    deslocar, e ir ao estado 7
    MATRIZ_TYPE     deslocar, e ir ao estado 8
    VOID_TYPE       deslocar, e ir ao estado 9
    LITERAL_CHAR    deslocar, e ir ao estado 10
    CHAR_TYPE       deslocar, e ir ao estado 11
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17
    IF_STM          deslocar, e ir ao estado 18
    FOR_STM         deslocar, e ir ao estado 19
    DO_STM          deslocar, e ir ao estado 20
    WHILE_STM       deslocar, e ir ao estado 21
    SWITCH_STM      deslocar, e ir ao estado 22
    PRINT           deslocar, e ir ao estado 23
    PRINTF          deslocar, e ir ao estado 24

    $padrão  reduzir usando a regra 2 (stm_list)

    stm_list        ir ao estado 101
    stm             ir ao estado 27
    decl            ir ao estado 28
    assingment      ir ao estado 29
    initialization  ir ao estado 30
    print_stm       ir ao estado 31
    expres_list     ir ao estado 32
    expr            ir ao estado 33
    cond_stm        ir ao estado 34
    if_struct       ir ao estado 35
    switch_struct   ir ao estado 36
    loop_stm        ir ao estado 37
    while_struct    ir ao estado 38
    for_struct      ir ao estado 39
    fun_struct      ir ao estado 40
    type            ir ao estado 41
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 64

   21 expres_list: expr SEMICOLON .
   22            | expr SEMICOLON . expres_list

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    $padrão  reduzir usando a regra 21 (expres_list)

    expres_list     ir ao estado 102
    expr            ir ao estado 33
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 65

   14 initialization: type IDENTIFIER . ASSINGMENT expr
   19 id_list: IDENTIFIER .
   20        | IDENTIFIER . COMMA id_list
   44 fun_struct: type IDENTIFIER . L_PARENTHESIS par_list R_PARENTHESIS L_KEY stm_list R_KEY

    ASSINGMENT     deslocar, e ir ao estado 103
    L_PARENTHESIS  deslocar, e ir ao estado 104
    COMMA          deslocar, e ir ao estado 105

    $padrão  reduzir usando a regra 19 (id_list)


Estado 66

   12 decl: type id_list .

    $padrão  reduzir usando a regra 12 (decl)


Estado 67

   60 arit_expr: arit_expr PLUS_OP . arit_expr_base

    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr_base  ir ao estado 107
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48


Estado 68

   61 arit_expr: arit_expr SUB_OP . arit_expr_base

    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr_base  ir ao estado 108
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48


Estado 69

   62 arit_expr: arit_expr DIV_OP . arit_expr_base

    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr_base  ir ao estado 109
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48


Estado 70

   63 arit_expr: arit_expr STAR . arit_expr_base

    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr_base  ir ao estado 110
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48


Estado 71

   64 arit_expr: arit_expr MOD_OP . arit_expr_base

    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr_base  ir ao estado 111
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48


Estado 72

   65 arit_expr: arit_expr INC_OP .

    $padrão  reduzir usando a regra 65 (arit_expr)


Estado 73

   66 arit_expr: arit_expr DEC_OP .

    $padrão  reduzir usando a regra 66 (arit_expr)


Estado 74

   76 op_log: AND_OP .

    $padrão  reduzir usando a regra 76 (op_log)


Estado 75

   77 op_log: OR_OP .

    $padrão  reduzir usando a regra 77 (op_log)


Estado 76

   78 op_log: NOT_OP .

    $padrão  reduzir usando a regra 78 (op_log)


Estado 77

   71 log_expr: log_expr op_log . comp_expr

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr       ir ao estado 90
    arit_expr_base  ir ao estado 43
    comp_expr       ir ao estado 112
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 78

   81 op_comp: GE_OP .

    $padrão  reduzir usando a regra 81 (op_comp)


Estado 79

   79 op_comp: SE_OP .

    $padrão  reduzir usando a regra 79 (op_comp)


Estado 80

   83 op_comp: EQ_OP .

    $padrão  reduzir usando a regra 83 (op_comp)


Estado 81

   84 op_comp: NE_OP .

    $padrão  reduzir usando a regra 84 (op_comp)


Estado 82

   82 op_comp: G_OP .

    $padrão  reduzir usando a regra 82 (op_comp)


Estado 83

   80 op_comp: S_OP .

    $padrão  reduzir usando a regra 80 (op_comp)


Estado 84

   73 comp_expr: comp_expr op_comp . arit_expr

    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr       ir ao estado 113
    arit_expr_base  ir ao estado 43
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48


Estado 85

   74 comp_expr: literal_string EQ_OP . literal_string

    LITERAL_STRING  deslocar, e ir ao estado 1
    LITERAL_CHAR    deslocar, e ir ao estado 10

    literal_string  ir ao estado 114


Estado 86

   75 comp_expr: literal_string NE_OP . literal_string

    LITERAL_STRING  deslocar, e ir ao estado 1
    LITERAL_CHAR    deslocar, e ir ao estado 10

    literal_string  ir ao estado 115


Estado 87

   13 assingment: IDENTIFIER ASSINGMENT expr .

    $padrão  reduzir usando a regra 13 (assingment)


Estado 88

   68 arit_expr_base: L_PARENTHESIS arit_expr R_PARENTHESIS .

    $padrão  reduzir usando a regra 68 (arit_expr_base)


Estado 89

   70 log_expr: L_PARENTHESIS log_expr R_PARENTHESIS .

    $padrão  reduzir usando a regra 70 (log_expr)


Estado 90

   60 arit_expr: arit_expr . PLUS_OP arit_expr_base
   61          | arit_expr . SUB_OP arit_expr_base
   62          | arit_expr . DIV_OP arit_expr_base
   63          | arit_expr . STAR arit_expr_base
   64          | arit_expr . MOD_OP arit_expr_base
   65          | arit_expr . INC_OP
   66          | arit_expr . DEC_OP
   72 comp_expr: arit_expr .

    PLUS_OP  deslocar, e ir ao estado 67
    SUB_OP   deslocar, e ir ao estado 68
    DIV_OP   deslocar, e ir ao estado 69
    STAR     deslocar, e ir ao estado 70
    MOD_OP   deslocar, e ir ao estado 71
    INC_OP   deslocar, e ir ao estado 72
    DEC_OP   deslocar, e ir ao estado 73

    $padrão  reduzir usando a regra 72 (comp_expr)


Estado 91

   27 if_struct: IF_STM L_PARENTHESIS log_expr . R_PARENTHESIS block else_struct
   71 log_expr: log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 74
    OR_OP          deslocar, e ir ao estado 75
    NOT_OP         deslocar, e ir ao estado 76
    R_PARENTHESIS  deslocar, e ir ao estado 116

    op_log  ir ao estado 77


Estado 92

   43 for_struct: FOR_STM L_PARENTHESIS $@1 . initialization SEMICOLON log_expr SEMICOLON arit_expr R_PARENTHESIS $@2 block

    INT_TYPE      deslocar, e ir ao estado 3
    FLOAT_TYPE    deslocar, e ir ao estado 4
    DOUBLE_TYPE   deslocar, e ir ao estado 5
    STRING_TYPE   deslocar, e ir ao estado 6
    BOOLEAN_TYPE  deslocar, e ir ao estado 7
    MATRIZ_TYPE   deslocar, e ir ao estado 8
    VOID_TYPE     deslocar, e ir ao estado 9
    CHAR_TYPE     deslocar, e ir ao estado 11

    initialization  ir ao estado 117
    type            ir ao estado 118


Estado 93

   46 block: L_KEY $@3 . stm_list R_KEY

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 2
    INT_TYPE        deslocar, e ir ao estado 3
    FLOAT_TYPE      deslocar, e ir ao estado 4
    DOUBLE_TYPE     deslocar, e ir ao estado 5
    STRING_TYPE     deslocar, e ir ao estado 6
    BOOLEAN_TYPE    deslocar, e ir ao estado 7
    MATRIZ_TYPE     deslocar, e ir ao estado 8
    VOID_TYPE       deslocar, e ir ao estado 9
    LITERAL_CHAR    deslocar, e ir ao estado 10
    CHAR_TYPE       deslocar, e ir ao estado 11
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17
    IF_STM          deslocar, e ir ao estado 18
    FOR_STM         deslocar, e ir ao estado 19
    DO_STM          deslocar, e ir ao estado 20
    WHILE_STM       deslocar, e ir ao estado 21
    SWITCH_STM      deslocar, e ir ao estado 22
    PRINT           deslocar, e ir ao estado 23
    PRINTF          deslocar, e ir ao estado 24

    stm_list        ir ao estado 119
    stm             ir ao estado 27
    decl            ir ao estado 28
    assingment      ir ao estado 29
    initialization  ir ao estado 30
    print_stm       ir ao estado 31
    expres_list     ir ao estado 32
    expr            ir ao estado 33
    cond_stm        ir ao estado 34
    if_struct       ir ao estado 35
    switch_struct   ir ao estado 36
    loop_stm        ir ao estado 37
    while_struct    ir ao estado 38
    for_struct      ir ao estado 39
    fun_struct      ir ao estado 40
    type            ir ao estado 41
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 94

   40 while_struct: DO_STM block WHILE_STM . L_PARENTHESIS log_expr R_PARENTHESIS

    L_PARENTHESIS  deslocar, e ir ao estado 120


Estado 95

   39 while_struct: WHILE_STM L_PARENTHESIS log_expr . R_PARENTHESIS block
   71 log_expr: log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 74
    OR_OP          deslocar, e ir ao estado 75
    NOT_OP         deslocar, e ir ao estado 76
    R_PARENTHESIS  deslocar, e ir ao estado 121

    op_log  ir ao estado 77


Estado 96

   93 literal_term: term .

    $padrão  reduzir usando a regra 93 (literal_term)


Estado 97

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term . R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    R_PARENTHESIS  deslocar, e ir ao estado 122


Estado 98

   94 literal_term: literal_string .

    $padrão  reduzir usando a regra 94 (literal_term)


Estado 99

   15 print_stm: PRINT L_PARENTHESIS literal_string . R_PARENTHESIS
   16          | PRINT L_PARENTHESIS literal_string . COMMA id_list R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 123
    COMMA          deslocar, e ir ao estado 124


Estado 100

   17 print_stm: PRINTF L_PARENTHESIS literal_string . R_PARENTHESIS
   18          | PRINTF L_PARENTHESIS literal_string . COMMA id_list R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 125
    COMMA          deslocar, e ir ao estado 126


Estado 101

    3 stm_list: stm SEMICOLON stm_list .

    $padrão  reduzir usando a regra 3 (stm_list)


Estado 102

   22 expres_list: expr SEMICOLON expres_list .

    $padrão  reduzir usando a regra 22 (expres_list)


Estado 103

   14 initialization: type IDENTIFIER ASSINGMENT . expr

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    expr            ir ao estado 127
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 104

   44 fun_struct: type IDENTIFIER L_PARENTHESIS . par_list R_PARENTHESIS L_KEY stm_list R_KEY

    INT_TYPE      deslocar, e ir ao estado 3
    FLOAT_TYPE    deslocar, e ir ao estado 4
    DOUBLE_TYPE   deslocar, e ir ao estado 5
    STRING_TYPE   deslocar, e ir ao estado 6
    BOOLEAN_TYPE  deslocar, e ir ao estado 7
    MATRIZ_TYPE   deslocar, e ir ao estado 8
    VOID_TYPE     deslocar, e ir ao estado 9
    CHAR_TYPE     deslocar, e ir ao estado 11

    $padrão  reduzir usando a regra 55 (par_list)

    type      ir ao estado 128
    par_list  ir ao estado 129
    par_term  ir ao estado 130


Estado 105

   20 id_list: IDENTIFIER COMMA . id_list

    IDENTIFIER  deslocar, e ir ao estado 131

    id_list  ir ao estado 132


Estado 106

   68 arit_expr_base: L_PARENTHESIS . arit_expr R_PARENTHESIS

    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr       ir ao estado 133
    arit_expr_base  ir ao estado 43
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48


Estado 107

   60 arit_expr: arit_expr PLUS_OP arit_expr_base .

    $padrão  reduzir usando a regra 60 (arit_expr)


Estado 108

   61 arit_expr: arit_expr SUB_OP arit_expr_base .

    $padrão  reduzir usando a regra 61 (arit_expr)


Estado 109

   62 arit_expr: arit_expr DIV_OP arit_expr_base .

    $padrão  reduzir usando a regra 62 (arit_expr)


Estado 110

   63 arit_expr: arit_expr STAR arit_expr_base .

    $padrão  reduzir usando a regra 63 (arit_expr)


Estado 111

   64 arit_expr: arit_expr MOD_OP arit_expr_base .

    $padrão  reduzir usando a regra 64 (arit_expr)


Estado 112

   71 log_expr: log_expr op_log comp_expr .
   73 comp_expr: comp_expr . op_comp arit_expr

    GE_OP  deslocar, e ir ao estado 78
    SE_OP  deslocar, e ir ao estado 79
    EQ_OP  deslocar, e ir ao estado 80
    NE_OP  deslocar, e ir ao estado 81
    G_OP   deslocar, e ir ao estado 82
    S_OP   deslocar, e ir ao estado 83

    $padrão  reduzir usando a regra 71 (log_expr)

    op_comp  ir ao estado 84


Estado 113

   60 arit_expr: arit_expr . PLUS_OP arit_expr_base
   61          | arit_expr . SUB_OP arit_expr_base
   62          | arit_expr . DIV_OP arit_expr_base
   63          | arit_expr . STAR arit_expr_base
   64          | arit_expr . MOD_OP arit_expr_base
   65          | arit_expr . INC_OP
   66          | arit_expr . DEC_OP
   73 comp_expr: comp_expr op_comp arit_expr .

    PLUS_OP  deslocar, e ir ao estado 67
    SUB_OP   deslocar, e ir ao estado 68
    DIV_OP   deslocar, e ir ao estado 69
    STAR     deslocar, e ir ao estado 70
    MOD_OP   deslocar, e ir ao estado 71
    INC_OP   deslocar, e ir ao estado 72
    DEC_OP   deslocar, e ir ao estado 73

    $padrão  reduzir usando a regra 73 (comp_expr)


Estado 114

   74 comp_expr: literal_string EQ_OP literal_string .

    $padrão  reduzir usando a regra 74 (comp_expr)


Estado 115

   75 comp_expr: literal_string NE_OP literal_string .

    $padrão  reduzir usando a regra 75 (comp_expr)


Estado 116

   27 if_struct: IF_STM L_PARENTHESIS log_expr R_PARENTHESIS . block else_struct

    L_KEY  deslocar, e ir ao estado 56

    block  ir ao estado 134


Estado 117

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization . SEMICOLON log_expr SEMICOLON arit_expr R_PARENTHESIS $@2 block

    SEMICOLON  deslocar, e ir ao estado 135


Estado 118

   14 initialization: type . IDENTIFIER ASSINGMENT expr

    IDENTIFIER  deslocar, e ir ao estado 136


Estado 119

   46 block: L_KEY $@3 stm_list . R_KEY

    R_KEY  deslocar, e ir ao estado 137


Estado 120

   40 while_struct: DO_STM block WHILE_STM L_PARENTHESIS . log_expr R_PARENTHESIS

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    arit_expr       ir ao estado 90
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 138
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 121

   39 while_struct: WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS . block

    L_KEY  deslocar, e ir ao estado 56

    block  ir ao estado 139


Estado 122

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS . L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    L_KEY  deslocar, e ir ao estado 140


Estado 123

   15 print_stm: PRINT L_PARENTHESIS literal_string R_PARENTHESIS .

    $padrão  reduzir usando a regra 15 (print_stm)


Estado 124

   16 print_stm: PRINT L_PARENTHESIS literal_string COMMA . id_list R_PARENTHESIS

    IDENTIFIER  deslocar, e ir ao estado 131

    id_list  ir ao estado 141


Estado 125

   17 print_stm: PRINTF L_PARENTHESIS literal_string R_PARENTHESIS .

    $padrão  reduzir usando a regra 17 (print_stm)


Estado 126

   18 print_stm: PRINTF L_PARENTHESIS literal_string COMMA . id_list R_PARENTHESIS

    IDENTIFIER  deslocar, e ir ao estado 131

    id_list  ir ao estado 142


Estado 127

   14 initialization: type IDENTIFIER ASSINGMENT expr .

    $padrão  reduzir usando a regra 14 (initialization)


Estado 128

   58 par_term: type . IDENTIFIER

    IDENTIFIER  deslocar, e ir ao estado 143


Estado 129

   44 fun_struct: type IDENTIFIER L_PARENTHESIS par_list . R_PARENTHESIS L_KEY stm_list R_KEY

    R_PARENTHESIS  deslocar, e ir ao estado 144


Estado 130

   56 par_list: par_term .
   57         | par_term . COMMA par_list

    COMMA  deslocar, e ir ao estado 145

    $padrão  reduzir usando a regra 56 (par_list)


Estado 131

   19 id_list: IDENTIFIER .
   20        | IDENTIFIER . COMMA id_list

    COMMA  deslocar, e ir ao estado 105

    $padrão  reduzir usando a regra 19 (id_list)


Estado 132

   20 id_list: IDENTIFIER COMMA id_list .

    $padrão  reduzir usando a regra 20 (id_list)


Estado 133

   60 arit_expr: arit_expr . PLUS_OP arit_expr_base
   61          | arit_expr . SUB_OP arit_expr_base
   62          | arit_expr . DIV_OP arit_expr_base
   63          | arit_expr . STAR arit_expr_base
   64          | arit_expr . MOD_OP arit_expr_base
   65          | arit_expr . INC_OP
   66          | arit_expr . DEC_OP
   68 arit_expr_base: L_PARENTHESIS arit_expr . R_PARENTHESIS

    PLUS_OP        deslocar, e ir ao estado 67
    SUB_OP         deslocar, e ir ao estado 68
    DIV_OP         deslocar, e ir ao estado 69
    STAR           deslocar, e ir ao estado 70
    MOD_OP         deslocar, e ir ao estado 71
    INC_OP         deslocar, e ir ao estado 72
    DEC_OP         deslocar, e ir ao estado 73
    R_PARENTHESIS  deslocar, e ir ao estado 88


Estado 134

   27 if_struct: IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block . else_struct

    ELSE_IF_STM  deslocar, e ir ao estado 146

    ELSE_STM  reduzir usando a regra 30 (elseif_list)
    $padrão  reduzir usando a regra 28 (else_struct)

    else_struct    ir ao estado 147
    elseif_list    ir ao estado 148
    elseif_struct  ir ao estado 149


Estado 135

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON . log_expr SEMICOLON arit_expr R_PARENTHESIS $@2 block

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    arit_expr       ir ao estado 90
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 150
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 136

   14 initialization: type IDENTIFIER . ASSINGMENT expr

    ASSINGMENT  deslocar, e ir ao estado 103


Estado 137

   46 block: L_KEY $@3 stm_list R_KEY .

    $padrão  reduzir usando a regra 46 (block)


Estado 138

   40 while_struct: DO_STM block WHILE_STM L_PARENTHESIS log_expr . R_PARENTHESIS
   71 log_expr: log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 74
    OR_OP          deslocar, e ir ao estado 75
    NOT_OP         deslocar, e ir ao estado 76
    R_PARENTHESIS  deslocar, e ir ao estado 151

    op_log  ir ao estado 77


Estado 139

   39 while_struct: WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS block .

    $padrão  reduzir usando a regra 39 (while_struct)


Estado 140

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY . case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    CASE  deslocar, e ir ao estado 152

    $padrão  reduzir usando a regra 34 (case_list_switch)

    case_list_switch  ir ao estado 153
    case_switch       ir ao estado 154


Estado 141

   16 print_stm: PRINT L_PARENTHESIS literal_string COMMA id_list . R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 155


Estado 142

   18 print_stm: PRINTF L_PARENTHESIS literal_string COMMA id_list . R_PARENTHESIS

    R_PARENTHESIS  deslocar, e ir ao estado 156


Estado 143

   58 par_term: type IDENTIFIER .

    $padrão  reduzir usando a regra 58 (par_term)


Estado 144

   44 fun_struct: type IDENTIFIER L_PARENTHESIS par_list R_PARENTHESIS . L_KEY stm_list R_KEY

    L_KEY  deslocar, e ir ao estado 157


Estado 145

   57 par_list: par_term COMMA . par_list

    INT_TYPE      deslocar, e ir ao estado 3
    FLOAT_TYPE    deslocar, e ir ao estado 4
    DOUBLE_TYPE   deslocar, e ir ao estado 5
    STRING_TYPE   deslocar, e ir ao estado 6
    BOOLEAN_TYPE  deslocar, e ir ao estado 7
    MATRIZ_TYPE   deslocar, e ir ao estado 8
    VOID_TYPE     deslocar, e ir ao estado 9
    CHAR_TYPE     deslocar, e ir ao estado 11

    $padrão  reduzir usando a regra 55 (par_list)

    type      ir ao estado 128
    par_list  ir ao estado 158
    par_term  ir ao estado 130


Estado 146

   32 elseif_struct: ELSE_IF_STM . L_PARENTHESIS log_expr R_PARENTHESIS block

    L_PARENTHESIS  deslocar, e ir ao estado 159


Estado 147

   27 if_struct: IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block else_struct .

    $padrão  reduzir usando a regra 27 (if_struct)


Estado 148

   29 else_struct: elseif_list . ELSE_STM block

    ELSE_STM  deslocar, e ir ao estado 160


Estado 149

   31 elseif_list: elseif_struct . elseif_list

    ELSE_IF_STM  deslocar, e ir ao estado 146

    $padrão  reduzir usando a regra 30 (elseif_list)

    elseif_list    ir ao estado 161
    elseif_struct  ir ao estado 149


Estado 150

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr . SEMICOLON arit_expr R_PARENTHESIS $@2 block
   71 log_expr: log_expr . op_log comp_expr

    AND_OP     deslocar, e ir ao estado 74
    OR_OP      deslocar, e ir ao estado 75
    NOT_OP     deslocar, e ir ao estado 76
    SEMICOLON  deslocar, e ir ao estado 162

    op_log  ir ao estado 77


Estado 151

   40 while_struct: DO_STM block WHILE_STM L_PARENTHESIS log_expr R_PARENTHESIS .

    $padrão  reduzir usando a regra 40 (while_struct)


Estado 152

   36 case_switch: CASE . literal_term DOUBLE_DOT stm_list BREAK SEMICOLON

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16

    term            ir ao estado 96
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_term    ir ao estado 163
    literal_string  ir ao estado 98


Estado 153

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch . DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    DEFAULT  deslocar, e ir ao estado 164


Estado 154

   35 case_list_switch: case_switch . case_list_switch

    CASE  deslocar, e ir ao estado 152

    $padrão  reduzir usando a regra 34 (case_list_switch)

    case_list_switch  ir ao estado 165
    case_switch       ir ao estado 154


Estado 155

   16 print_stm: PRINT L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS .

    $padrão  reduzir usando a regra 16 (print_stm)


Estado 156

   18 print_stm: PRINTF L_PARENTHESIS literal_string COMMA id_list R_PARENTHESIS .

    $padrão  reduzir usando a regra 18 (print_stm)


Estado 157

   44 fun_struct: type IDENTIFIER L_PARENTHESIS par_list R_PARENTHESIS L_KEY . stm_list R_KEY

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 2
    INT_TYPE        deslocar, e ir ao estado 3
    FLOAT_TYPE      deslocar, e ir ao estado 4
    DOUBLE_TYPE     deslocar, e ir ao estado 5
    STRING_TYPE     deslocar, e ir ao estado 6
    BOOLEAN_TYPE    deslocar, e ir ao estado 7
    MATRIZ_TYPE     deslocar, e ir ao estado 8
    VOID_TYPE       deslocar, e ir ao estado 9
    LITERAL_CHAR    deslocar, e ir ao estado 10
    CHAR_TYPE       deslocar, e ir ao estado 11
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17
    IF_STM          deslocar, e ir ao estado 18
    FOR_STM         deslocar, e ir ao estado 19
    DO_STM          deslocar, e ir ao estado 20
    WHILE_STM       deslocar, e ir ao estado 21
    SWITCH_STM      deslocar, e ir ao estado 22
    PRINT           deslocar, e ir ao estado 23
    PRINTF          deslocar, e ir ao estado 24

    stm_list        ir ao estado 166
    stm             ir ao estado 27
    decl            ir ao estado 28
    assingment      ir ao estado 29
    initialization  ir ao estado 30
    print_stm       ir ao estado 31
    expres_list     ir ao estado 32
    expr            ir ao estado 33
    cond_stm        ir ao estado 34
    if_struct       ir ao estado 35
    switch_struct   ir ao estado 36
    loop_stm        ir ao estado 37
    while_struct    ir ao estado 38
    for_struct      ir ao estado 39
    fun_struct      ir ao estado 40
    type            ir ao estado 41
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 158

   57 par_list: par_term COMMA par_list .

    $padrão  reduzir usando a regra 57 (par_list)


Estado 159

   32 elseif_struct: ELSE_IF_STM L_PARENTHESIS . log_expr R_PARENTHESIS block

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_CHAR    deslocar, e ir ao estado 10
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17

    arit_expr       ir ao estado 90
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 167
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 160

   29 else_struct: elseif_list ELSE_STM . block

    L_KEY  deslocar, e ir ao estado 56

    block  ir ao estado 168


Estado 161

   31 elseif_list: elseif_struct elseif_list .

    $padrão  reduzir usando a regra 31 (elseif_list)


Estado 162

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON . arit_expr R_PARENTHESIS $@2 block

    IDENTIFIER      deslocar, e ir ao estado 51
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 106

    arit_expr       ir ao estado 169
    arit_expr_base  ir ao estado 43
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48


Estado 163

   36 case_switch: CASE literal_term . DOUBLE_DOT stm_list BREAK SEMICOLON

    DOUBLE_DOT  deslocar, e ir ao estado 170


Estado 164

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT . DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY

    DOUBLE_DOT  deslocar, e ir ao estado 171


Estado 165

   35 case_list_switch: case_switch case_list_switch .

    $padrão  reduzir usando a regra 35 (case_list_switch)


Estado 166

   44 fun_struct: type IDENTIFIER L_PARENTHESIS par_list R_PARENTHESIS L_KEY stm_list . R_KEY

    R_KEY  deslocar, e ir ao estado 172


Estado 167

   32 elseif_struct: ELSE_IF_STM L_PARENTHESIS log_expr . R_PARENTHESIS block
   71 log_expr: log_expr . op_log comp_expr

    AND_OP         deslocar, e ir ao estado 74
    OR_OP          deslocar, e ir ao estado 75
    NOT_OP         deslocar, e ir ao estado 76
    R_PARENTHESIS  deslocar, e ir ao estado 173

    op_log  ir ao estado 77


Estado 168

   29 else_struct: elseif_list ELSE_STM block .

    $padrão  reduzir usando a regra 29 (else_struct)


Estado 169

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON arit_expr . R_PARENTHESIS $@2 block
   60 arit_expr: arit_expr . PLUS_OP arit_expr_base
   61          | arit_expr . SUB_OP arit_expr_base
   62          | arit_expr . DIV_OP arit_expr_base
   63          | arit_expr . STAR arit_expr_base
   64          | arit_expr . MOD_OP arit_expr_base
   65          | arit_expr . INC_OP
   66          | arit_expr . DEC_OP

    PLUS_OP        deslocar, e ir ao estado 67
    SUB_OP         deslocar, e ir ao estado 68
    DIV_OP         deslocar, e ir ao estado 69
    STAR           deslocar, e ir ao estado 70
    MOD_OP         deslocar, e ir ao estado 71
    INC_OP         deslocar, e ir ao estado 72
    DEC_OP         deslocar, e ir ao estado 73
    R_PARENTHESIS  deslocar, e ir ao estado 174


Estado 170

   36 case_switch: CASE literal_term DOUBLE_DOT . stm_list BREAK SEMICOLON

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 2
    INT_TYPE        deslocar, e ir ao estado 3
    FLOAT_TYPE      deslocar, e ir ao estado 4
    DOUBLE_TYPE     deslocar, e ir ao estado 5
    STRING_TYPE     deslocar, e ir ao estado 6
    BOOLEAN_TYPE    deslocar, e ir ao estado 7
    MATRIZ_TYPE     deslocar, e ir ao estado 8
    VOID_TYPE       deslocar, e ir ao estado 9
    LITERAL_CHAR    deslocar, e ir ao estado 10
    CHAR_TYPE       deslocar, e ir ao estado 11
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17
    IF_STM          deslocar, e ir ao estado 18
    FOR_STM         deslocar, e ir ao estado 19
    DO_STM          deslocar, e ir ao estado 20
    WHILE_STM       deslocar, e ir ao estado 21
    SWITCH_STM      deslocar, e ir ao estado 22
    PRINT           deslocar, e ir ao estado 23
    PRINTF          deslocar, e ir ao estado 24

    stm_list        ir ao estado 175
    stm             ir ao estado 27
    decl            ir ao estado 28
    assingment      ir ao estado 29
    initialization  ir ao estado 30
    print_stm       ir ao estado 31
    expres_list     ir ao estado 32
    expr            ir ao estado 33
    cond_stm        ir ao estado 34
    if_struct       ir ao estado 35
    switch_struct   ir ao estado 36
    loop_stm        ir ao estado 37
    while_struct    ir ao estado 38
    for_struct      ir ao estado 39
    fun_struct      ir ao estado 40
    type            ir ao estado 41
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 171

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT . stm_list BREAK SEMICOLON R_KEY

    LITERAL_STRING  deslocar, e ir ao estado 1
    IDENTIFIER      deslocar, e ir ao estado 2
    INT_TYPE        deslocar, e ir ao estado 3
    FLOAT_TYPE      deslocar, e ir ao estado 4
    DOUBLE_TYPE     deslocar, e ir ao estado 5
    STRING_TYPE     deslocar, e ir ao estado 6
    BOOLEAN_TYPE    deslocar, e ir ao estado 7
    MATRIZ_TYPE     deslocar, e ir ao estado 8
    VOID_TYPE       deslocar, e ir ao estado 9
    LITERAL_CHAR    deslocar, e ir ao estado 10
    CHAR_TYPE       deslocar, e ir ao estado 11
    LITERAL_INT     deslocar, e ir ao estado 12
    LITERAL_FLOAT   deslocar, e ir ao estado 13
    LITERAL_DOUBLE  deslocar, e ir ao estado 14
    TRUE_VAL        deslocar, e ir ao estado 15
    FALSE_VAL       deslocar, e ir ao estado 16
    L_PARENTHESIS   deslocar, e ir ao estado 17
    IF_STM          deslocar, e ir ao estado 18
    FOR_STM         deslocar, e ir ao estado 19
    DO_STM          deslocar, e ir ao estado 20
    WHILE_STM       deslocar, e ir ao estado 21
    SWITCH_STM      deslocar, e ir ao estado 22
    PRINT           deslocar, e ir ao estado 23
    PRINTF          deslocar, e ir ao estado 24

    stm_list        ir ao estado 176
    stm             ir ao estado 27
    decl            ir ao estado 28
    assingment      ir ao estado 29
    initialization  ir ao estado 30
    print_stm       ir ao estado 31
    expres_list     ir ao estado 32
    expr            ir ao estado 33
    cond_stm        ir ao estado 34
    if_struct       ir ao estado 35
    switch_struct   ir ao estado 36
    loop_stm        ir ao estado 37
    while_struct    ir ao estado 38
    for_struct      ir ao estado 39
    fun_struct      ir ao estado 40
    type            ir ao estado 41
    arit_expr       ir ao estado 42
    arit_expr_base  ir ao estado 43
    log_expr        ir ao estado 44
    comp_expr       ir ao estado 45
    term            ir ao estado 46
    term_num        ir ao estado 47
    log_term        ir ao estado 48
    literal_string  ir ao estado 49


Estado 172

   44 fun_struct: type IDENTIFIER L_PARENTHESIS par_list R_PARENTHESIS L_KEY stm_list R_KEY .

    $padrão  reduzir usando a regra 44 (fun_struct)


Estado 173

   32 elseif_struct: ELSE_IF_STM L_PARENTHESIS log_expr R_PARENTHESIS . block

    L_KEY  deslocar, e ir ao estado 56

    block  ir ao estado 177


Estado 174

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON arit_expr R_PARENTHESIS . $@2 block

    $padrão  reduzir usando a regra 42 ($@2)

    $@2  ir ao estado 178


Estado 175

   36 case_switch: CASE literal_term DOUBLE_DOT stm_list . BREAK SEMICOLON

    BREAK  deslocar, e ir ao estado 179


Estado 176

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list . BREAK SEMICOLON R_KEY

    BREAK  deslocar, e ir ao estado 180


Estado 177

   32 elseif_struct: ELSE_IF_STM L_PARENTHESIS log_expr R_PARENTHESIS block .

    $padrão  reduzir usando a regra 32 (elseif_struct)


Estado 178

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON arit_expr R_PARENTHESIS $@2 . block

    L_KEY  deslocar, e ir ao estado 56

    block  ir ao estado 181


Estado 179

   36 case_switch: CASE literal_term DOUBLE_DOT stm_list BREAK . SEMICOLON

    SEMICOLON  deslocar, e ir ao estado 182


Estado 180

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK . SEMICOLON R_KEY

    SEMICOLON  deslocar, e ir ao estado 183


Estado 181

   43 for_struct: FOR_STM L_PARENTHESIS $@1 initialization SEMICOLON log_expr SEMICOLON arit_expr R_PARENTHESIS $@2 block .

    $padrão  reduzir usando a regra 43 (for_struct)


Estado 182

   36 case_switch: CASE literal_term DOUBLE_DOT stm_list BREAK SEMICOLON .

    $padrão  reduzir usando a regra 36 (case_switch)


Estado 183

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON . R_KEY

    R_KEY  deslocar, e ir ao estado 184


Estado 184

   33 switch_struct: SWITCH_STM L_PARENTHESIS literal_term R_PARENTHESIS L_KEY case_list_switch DEFAULT DOUBLE_DOT stm_list BREAK SEMICOLON R_KEY .

    $padrão  reduzir usando a regra 33 (switch_struct)
